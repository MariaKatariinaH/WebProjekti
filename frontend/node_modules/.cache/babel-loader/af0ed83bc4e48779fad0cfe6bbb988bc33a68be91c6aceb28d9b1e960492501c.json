{"ast":null,"code":"var _jsxFileName = \"C:\\\\WebSovellukset\\\\Loppuprojekti\\\\frontend\\\\src\\\\components\\\\statistics\\\\TasksThisMonth.component.tsx\",\n  _s = $RefreshSig$();\nimport \"./statistics-chart.scss\";\nimport { useState, useEffect } from \"react\";\nimport { BarChart } from \"@mui/x-charts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TasksThisMonth = () => {\n  _s();\n  const [mytasks, setMyTasks] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchMyTasks = async () => {\n      try {\n        const response = await fetch(\"http://localhost:5004/api/MyTask/Get\");\n        const data = await response.json();\n        setMyTasks(data);\n        setLoading(false);\n      } catch (err) {\n        setError(err);\n        setLoading(false);\n      }\n    };\n    fetchMyTasks();\n  }, []);\n  const getMyTasksThisMonth = mytasks => {\n    const currentDate = new Date();\n    const currentMonth = currentDate.getMonth();\n    const currentYear = currentDate.getFullYear();\n    return mytasks.filter(mytask => {\n      const updatedAtDate = new Date(mytask.updatedAt);\n      return mytask.status === \"Done\" && updatedAtDate.getMonth() === currentMonth && updatedAtDate.getFullYear() === currentYear;\n    });\n  };\n  const mytasksThisMonth = getMyTasksThisMonth(mytasks);\n  const groupMyTasksByStatus = mytasks => {\n    let doneCount = 0;\n    mytasks.forEach(mytask => {\n      if (mytask.status === \"Done\") {\n        doneCount += 1;\n      }\n    });\n    return {\n      done: doneCount\n    };\n  };\n  const statusCounts = groupMyTasksByStatus(mytasksThisMonth);\n  const uData = [statusCounts.done];\n  const xLabels = [\"Done\"];\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Error fetching data\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"content\",\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Be proud of your progress this month.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BarChart, {\n      width: 500,\n      height: 300,\n      series: [{\n        data: uData,\n        label: \"Count\",\n        type: \"bar\",\n        color: \"#ff8c00\"\n      }],\n      xAxis: [{\n        scaleType: \"band\",\n        data: xLabels\n      }]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n_s(TasksThisMonth, \"hP/c/r9I5nNqJIkznPQOPxfEGYE=\");\n_c = TasksThisMonth;\nexport default TasksThisMonth;\nvar _c;\n$RefreshReg$(_c, \"TasksThisMonth\");","map":{"version":3,"names":["useState","useEffect","BarChart","jsxDEV","_jsxDEV","TasksThisMonth","_s","mytasks","setMyTasks","loading","setLoading","error","setError","fetchMyTasks","response","fetch","data","json","err","getMyTasksThisMonth","currentDate","Date","currentMonth","getMonth","currentYear","getFullYear","filter","mytask","updatedAtDate","updatedAt","status","mytasksThisMonth","groupMyTasksByStatus","doneCount","forEach","done","statusCounts","uData","xLabels","children","fileName","_jsxFileName","lineNumber","columnNumber","className","width","height","series","label","type","color","xAxis","scaleType","_c","$RefreshReg$"],"sources":["C:/WebSovellukset/Loppuprojekti/frontend/src/components/statistics/TasksThisMonth.component.tsx"],"sourcesContent":["import \"./statistics-chart.scss\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { BarChart } from \"@mui/x-charts\";\r\nimport { IMyTask } from \"../../types/global.typing\";\r\n\r\nconst TasksThisMonth = () => {\r\n  const [mytasks, setMyTasks] = useState<IMyTask[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<Error | null>(null);\r\n\r\n  useEffect(() => {\r\n    const fetchMyTasks = async () => {\r\n      try {\r\n        const response = await fetch(\"http://localhost:5004/api/MyTask/Get\");\r\n        const data = await response.json();\r\n        setMyTasks(data);\r\n        setLoading(false);\r\n      } catch (err: any) {\r\n        setError(err as Error);\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchMyTasks();\r\n  }, []);\r\n\r\n  const getMyTasksThisMonth = (mytasks: IMyTask[]) => {\r\n    const currentDate = new Date();\r\n    const currentMonth = currentDate.getMonth();\r\n    const currentYear = currentDate.getFullYear();\r\n\r\n    return mytasks.filter((mytask) => {\r\n      const updatedAtDate = new Date(mytask.updatedAt);\r\n      return (\r\n        mytask.status === \"Done\" &&\r\n        updatedAtDate.getMonth() === currentMonth &&\r\n        updatedAtDate.getFullYear() === currentYear\r\n      );\r\n    });\r\n  };\r\n\r\n  const mytasksThisMonth = getMyTasksThisMonth(mytasks);\r\n  \r\n  const groupMyTasksByStatus = (mytasks: IMyTask[]) => {\r\n    let doneCount = 0;\r\n\r\n    mytasks.forEach((mytask) => {\r\n      if (mytask.status === \"Done\") {\r\n        doneCount += 1;\r\n      }\r\n    });\r\n\r\n    return { done: doneCount };\r\n  };\r\n\r\n  const statusCounts = groupMyTasksByStatus(mytasksThisMonth);\r\n  \r\n  const uData = [statusCounts.done];\r\n\r\n  const xLabels = [\"Done\"];\r\n\r\n  if (loading) return <p>Loading...</p>;\r\n  if (error) return <p>Error fetching data</p>;\r\n\r\n  return (\r\n    <div className=\"content\">\r\n      <span>Be proud of your progress this month.</span>\r\n      <BarChart\r\n        width={500}\r\n        height={300}\r\n        series={[\r\n          { data: uData, label: \"Count\", type: \"bar\", color: \"#ff8c00\" },\r\n        ]}\r\n        xAxis={[{ scaleType: \"band\", data: xLabels }]}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TasksThisMonth;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}