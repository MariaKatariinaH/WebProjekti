{"ast":null,"code":"var _jsxFileName = \"C:\\\\WebSovellukset\\\\Loppuprojekti\\\\frontend\\\\src\\\\components\\\\statistics\\\\StatisticsBarChart.component.tsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport 'chartjs-adapter-moment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function StatisticsBarChart() {\n  _s();\n  const [data, setData] = useState(null);\n  const [isLoading, setLoading] = useState(true);\n  useEffect(() => {\n    fetch('http://localhost:5004/api/Activity/Get').then(res => res.json()).then(responseData => {\n      setData(responseData);\n      setLoading(false);\n    }).catch(error => {\n      console.error('Error fetching data:', error);\n      setLoading(false);\n    });\n  }, []);\n  if (isLoading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 25\n  }, this);\n  if (!data) {\n    console.log(\"No profile data\", data);\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No profile data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 12\n    }, this);\n  }\n  const chartData = {\n    labels: data.status.map(status => status.count),\n    datasets: [{\n      label: 'Count',\n      data: data.status.map(status => status.count),\n      backgroundColor: ['rgba(255, 99, 132, 0.2)', 'rgba(54, 162, 235, 0.2)', 'rgba(75, 192, 192, 0.2)', 'rgba(255, 206, 86, 0.2)'],\n      borderColor: ['rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(75, 192, 192, 1)', 'rgba(255, 206, 86, 1)'],\n      borderWidth: 1\n    }]\n  };\n  const chartOptions = {\n    maintainAspectRatio: false,\n    scales: {\n      x: {\n        type: 'string',\n        title: {\n          display: true,\n          text: 'Status'\n        }\n      },\n      y: {\n        title: {\n          display: true,\n          text: 'Count'\n        },\n        beginAtZero: true\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100%',\n      maxWidth: '1200px',\n      margin: 'auto',\n      minHeight: '400px'\n    },\n    children: /*#__PURE__*/_jsxDEV(Bar, {\n      data: chartData,\n      options: chartOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n_s(StatisticsBarChart, \"9hfq03Dtf1U6/pkOT6/HOHrc9QU=\");\n_c = StatisticsBarChart;\nvar _c;\n$RefreshReg$(_c, \"StatisticsBarChart\");","map":{"version":3,"names":["useState","useEffect","Bar","jsxDEV","_jsxDEV","StatisticsBarChart","_s","data","setData","isLoading","setLoading","fetch","then","res","json","responseData","catch","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","log","chartData","labels","status","map","count","datasets","label","backgroundColor","borderColor","borderWidth","chartOptions","maintainAspectRatio","scales","x","type","title","display","text","y","beginAtZero","style","width","maxWidth","margin","minHeight","options","_c","$RefreshReg$"],"sources":["C:/WebSovellukset/Loppuprojekti/frontend/src/components/statistics/StatisticsBarChart.component.tsx"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport Chart from 'chart.js/auto';\r\nimport 'chartjs-adapter-moment';\r\n\r\nexport default function StatisticsBarChart() {\r\n  const [data, setData] = useState(null);\r\n  const [isLoading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    fetch('http://localhost:5004/api/Activity/Get')\r\n      .then((res) => res.json())\r\n      .then((responseData) => {\r\n        setData(responseData);\r\n        setLoading(false);\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error fetching data:', error);\r\n        setLoading(false);\r\n      });\r\n  }, []);\r\n\r\n \r\n  if (isLoading) return <p>Loading...</p>;\r\n  if (!data) {\r\n    console.log(\"No profile data\", data)\r\n    return <p>No profile data</p>\r\n  }\r\n\r\n  const chartData = {\r\n    labels: data.status.map((status) =>\r\n    status.count),\r\n    datasets: [\r\n      {\r\n        label: 'Count',\r\n        data: data.status.map((status) => status.count),\r\n        backgroundColor: [\r\n          'rgba(255, 99, 132, 0.2)',\r\n          'rgba(54, 162, 235, 0.2)',\r\n          'rgba(75, 192, 192, 0.2)',\r\n          'rgba(255, 206, 86, 0.2)',\r\n        ],\r\n        borderColor: [\r\n          'rgba(255, 99, 132, 1)',\r\n          'rgba(54, 162, 235, 1)',\r\n          'rgba(75, 192, 192, 1)',\r\n          'rgba(255, 206, 86, 1)',\r\n        ],\r\n        borderWidth: 1,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const chartOptions = {\r\n    maintainAspectRatio: false,\r\n    scales: {\r\n      x: {\r\n        type: 'string', \r\n        \r\n        title: {\r\n          display: true,\r\n          text: 'Status',\r\n        },\r\n      },\r\n      y: {\r\n        title: {\r\n          display: true,\r\n          text: 'Count',\r\n        },\r\n        beginAtZero: true,\r\n      },\r\n      \r\n    },\r\n  };\r\n\r\n  return (\r\n    <div style={{ width: '100%', maxWidth: '1200px', margin: 'auto', minHeight: '400px' }}>\r\n      <Bar data={chartData} options={chartOptions} />\r\n    </div>\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}