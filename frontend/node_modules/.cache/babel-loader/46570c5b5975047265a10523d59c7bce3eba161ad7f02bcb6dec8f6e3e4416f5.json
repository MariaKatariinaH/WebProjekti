{"ast":null,"code":"var _jsxFileName = \"C:\\\\WebSovellukset\\\\Loppuprojekti\\\\frontend\\\\src\\\\components\\\\statistics\\\\StatisticsBarChart.component.tsx\";\nimport * as React from 'react';\nimport { ChartContainer, BarPlot } from '@mui/x-charts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst groupActivitiesByStatus = activities => {\n  const statusCounts = {\n    new: 0,\n    inprogress: 0,\n    done: 0,\n    notdoing: 0\n  };\n  activities.forEach(activity => {\n    if (activity.status) {\n      statusCounts[activity.status.toLowerCase()] += 1;\n    }\n  });\n  return statusCounts;\n};\nconst StatisticsPage = ({\n  activities\n}) => {\n  const statusCounts = groupActivitiesByStatus(activities);\n  const uData = [statusCounts.new, statusCounts.inprogress, statusCounts.done, statusCounts.notdoing];\n  const xLabels = ['New', 'In Progress', 'Done', 'Not Doing'];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"statistics-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Activities Status Statistics\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChartContainer, {\n      width: 500,\n      height: 300,\n      series: [{\n        data: uData,\n        label: 'Count',\n        type: 'bar'\n      }],\n      xAxis: [{\n        scaleType: 'band',\n        data: xLabels\n      }],\n      children: /*#__PURE__*/_jsxDEV(BarPlot, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_c = StatisticsPage;\nexport default StatisticsPage;\nvar _c;\n$RefreshReg$(_c, \"StatisticsPage\");","map":{"version":3,"names":["React","ChartContainer","BarPlot","jsxDEV","_jsxDEV","groupActivitiesByStatus","activities","statusCounts","new","inprogress","done","notdoing","forEach","activity","status","toLowerCase","StatisticsPage","uData","xLabels","className","children","fileName","_jsxFileName","lineNumber","columnNumber","width","height","series","data","label","type","xAxis","scaleType","_c","$RefreshReg$"],"sources":["C:/WebSovellukset/Loppuprojekti/frontend/src/components/statistics/StatisticsBarChart.component.tsx"],"sourcesContent":["import * as React from 'react';\r\nimport { ChartContainer, BarPlot } from '@mui/x-charts';\r\nimport { IActivity } from '../../types/global.typing';\r\n\r\ninterface IStatisticsPageProps {\r\n  activities: IActivity[];\r\n}\r\n\r\nconst groupActivitiesByStatus = (activities: IActivity[]) => {\r\n  const statusCounts: { [key: string]: number } = {\r\n    new: 0,\r\n    inprogress: 0,\r\n    done: 0,\r\n    notdoing: 0,\r\n  };\r\n\r\n  activities.forEach((activity) => {\r\n    if (activity.status) {\r\n      statusCounts[activity.status.toLowerCase()] += 1;\r\n    }\r\n  });\r\n\r\n  return statusCounts;\r\n};\r\n\r\nconst StatisticsPage: React.FC<IStatisticsPageProps> = ({ activities }) => {\r\n  const statusCounts = groupActivitiesByStatus(activities);\r\n\r\n  const uData = [\r\n    statusCounts.new,\r\n    statusCounts.inprogress,\r\n    statusCounts.done,\r\n    statusCounts.notdoing,\r\n  ];\r\n\r\n  const xLabels = ['New', 'In Progress', 'Done', 'Not Doing'];\r\n\r\n  return (\r\n    <div className=\"statistics-container\">\r\n      <h2>Activities Status Statistics</h2>\r\n      <ChartContainer\r\n        width={500}\r\n        height={300}\r\n        series={[{ data: uData, label: 'Count', type: 'bar' }]}\r\n        xAxis={[{ scaleType: 'band', data: xLabels }]}\r\n      >\r\n        <BarPlot />\r\n      </ChartContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StatisticsPage;\r\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,cAAc,EAAEC,OAAO,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAOxD,MAAMC,uBAAuB,GAAIC,UAAuB,IAAK;EAC3D,MAAMC,YAAuC,GAAG;IAC9CC,GAAG,EAAE,CAAC;IACNC,UAAU,EAAE,CAAC;IACbC,IAAI,EAAE,CAAC;IACPC,QAAQ,EAAE;EACZ,CAAC;EAEDL,UAAU,CAACM,OAAO,CAAEC,QAAQ,IAAK;IAC/B,IAAIA,QAAQ,CAACC,MAAM,EAAE;MACnBP,YAAY,CAACM,QAAQ,CAACC,MAAM,CAACC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC;IAClD;EACF,CAAC,CAAC;EAEF,OAAOR,YAAY;AACrB,CAAC;AAED,MAAMS,cAA8C,GAAGA,CAAC;EAAEV;AAAW,CAAC,KAAK;EACzE,MAAMC,YAAY,GAAGF,uBAAuB,CAACC,UAAU,CAAC;EAExD,MAAMW,KAAK,GAAG,CACZV,YAAY,CAACC,GAAG,EAChBD,YAAY,CAACE,UAAU,EACvBF,YAAY,CAACG,IAAI,EACjBH,YAAY,CAACI,QAAQ,CACtB;EAED,MAAMO,OAAO,GAAG,CAAC,KAAK,EAAE,aAAa,EAAE,MAAM,EAAE,WAAW,CAAC;EAE3D,oBACEd,OAAA;IAAKe,SAAS,EAAC,sBAAsB;IAAAC,QAAA,gBACnChB,OAAA;MAAAgB,QAAA,EAAI;IAA4B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrCpB,OAAA,CAACH,cAAc;MACbwB,KAAK,EAAE,GAAI;MACXC,MAAM,EAAE,GAAI;MACZC,MAAM,EAAE,CAAC;QAAEC,IAAI,EAAEX,KAAK;QAAEY,KAAK,EAAE,OAAO;QAAEC,IAAI,EAAE;MAAM,CAAC,CAAE;MACvDC,KAAK,EAAE,CAAC;QAAEC,SAAS,EAAE,MAAM;QAAEJ,IAAI,EAAEV;MAAQ,CAAC,CAAE;MAAAE,QAAA,eAE9ChB,OAAA,CAACF,OAAO;QAAAmB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACG,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACd,CAAC;AAEV,CAAC;AAACS,EAAA,GAzBIjB,cAA8C;AA2BpD,eAAeA,cAAc;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}