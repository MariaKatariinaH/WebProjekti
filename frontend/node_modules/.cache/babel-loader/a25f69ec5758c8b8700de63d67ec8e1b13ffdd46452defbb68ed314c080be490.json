{"ast":null,"code":"var _jsxFileName = \"C:\\\\WebSovellukset\\\\Loppuprojekti\\\\frontend\\\\src\\\\components\\\\statistics\\\\StatisticsBarChart.component.tsx\",\n  _s = $RefreshSig$();\nimport * as React from 'react';\nimport { ChartContainer, BarPlot, ChartsXAxis, ChartsYAxis, ChartsTooltip, ChartsLegend } from '@mui/x-charts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Statistics = () => {\n  _s();\n  const [activities, setActivities] = React.useState([]);\n  const [loading, setLoading] = React.useState(true);\n  const [error, setError] = React.useState(null); // Changed null to any for error state\n\n  React.useEffect(() => {\n    const fetchActivities = async () => {\n      try {\n        const response = await fetch('http://localhost:5004/api/Activity/Get');\n        const data = await response.json();\n        setActivities(data);\n        setLoading(false);\n      } catch (err) {\n        setError(err);\n        setLoading(false);\n      }\n    };\n    fetchActivities();\n  }, []);\n  const groupActivitiesByStatus = activities => {\n    const statusCounts = {\n      New: 0,\n      InProgress: 0,\n      Done: 0,\n      NotDoingIt: 0\n    };\n    activities.forEach(activity => {\n      const status = activity.status.charAt(0).toUpperCase() + activity.status.slice(1); // Capitalize the status\n      if (statusCounts.hasOwnProperty(status)) {\n        statusCounts[status]++;\n      }\n    });\n    return statusCounts;\n  };\n  const statusCounts = groupActivitiesByStatus(activities);\n  const chartData = [{\n    status: 'New',\n    count: statusCounts.New\n  }, {\n    status: 'InProgress',\n    count: statusCounts.InProgress\n  }, {\n    status: 'Done',\n    count: statusCounts.Done\n  }, {\n    status: 'NotDoingIt',\n    count: statusCounts.NotDoingIt\n  }];\n  const series = [{\n    data: chartData.map(item => item.count),\n    label: 'Count',\n    id: 'countId'\n  }];\n  const xLabels = chartData.map(item => item.status);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Error fetching data\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"content statistics\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Your situation\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Be proud of your progress.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChartContainer, {\n      width: 500,\n      height: 300,\n      series: series,\n      children: [/*#__PURE__*/_jsxDEV(BarPlot, {\n        data: chartData.map(item => item.count),\n        label: \"Count\",\n        id: \"countId\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChartsXAxis, {\n        data: xLabels,\n        scaleType: \"band\",\n        categoryGapRatio: 0.3,\n        barGapRatio: 0.1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChartsYAxis, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChartsTooltip, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChartsLegend, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s(Statistics, \"QUo/oLkcOdllJU1Xvu036Y1MawY=\");\n_c = Statistics;\nexport default Statistics;\nvar _c;\n$RefreshReg$(_c, \"Statistics\");","map":{"version":3,"names":["React","ChartContainer","BarPlot","ChartsXAxis","ChartsYAxis","ChartsTooltip","ChartsLegend","jsxDEV","_jsxDEV","Statistics","_s","activities","setActivities","useState","loading","setLoading","error","setError","useEffect","fetchActivities","response","fetch","data","json","err","groupActivitiesByStatus","statusCounts","New","InProgress","Done","NotDoingIt","forEach","activity","status","charAt","toUpperCase","slice","hasOwnProperty","chartData","count","series","map","item","label","id","xLabels","children","fileName","_jsxFileName","lineNumber","columnNumber","className","width","height","scaleType","categoryGapRatio","barGapRatio","_c","$RefreshReg$"],"sources":["C:/WebSovellukset/Loppuprojekti/frontend/src/components/statistics/StatisticsBarChart.component.tsx"],"sourcesContent":["import * as React from 'react';\r\nimport { ChartContainer, BarPlot, ChartsXAxis, ChartsYAxis, ChartsTooltip, ChartsLegend } from '@mui/x-charts';\r\nimport { IActivity } from '../../types/global.typing';\r\n\r\nconst Statistics = () => {\r\n  const [activities, setActivities] = React.useState<IActivity[]>([]);\r\n  const [loading, setLoading] = React.useState(true);\r\n  const [error, setError] = React.useState<any>(null); // Changed null to any for error state\r\n\r\n  React.useEffect(() => {\r\n    const fetchActivities = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:5004/api/Activity/Get'); \r\n        const data = await response.json();\r\n        setActivities(data);\r\n        setLoading(false);\r\n      } catch (err) {\r\n        setError(err);\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchActivities();\r\n  }, []);\r\n\r\n  const groupActivitiesByStatus = (activities: IActivity[]) => {\r\n    const statusCounts: { [key: string]: number } = {\r\n      New: 0,\r\n      InProgress: 0,\r\n      Done: 0,\r\n      NotDoingIt: 0,\r\n    };\r\n\r\n    activities.forEach((activity) => {\r\n      const status = activity.status.charAt(0).toUpperCase() + activity.status.slice(1); // Capitalize the status\r\n      if (statusCounts.hasOwnProperty(status)) {\r\n        statusCounts[status]++;\r\n      }\r\n    });\r\n\r\n    return statusCounts;\r\n  };\r\n\r\n  const statusCounts = groupActivitiesByStatus(activities);\r\n\r\n  const chartData = [\r\n    { status: 'New', count: statusCounts.New },\r\n    { status: 'InProgress', count: statusCounts.InProgress },\r\n    { status: 'Done', count: statusCounts.Done },\r\n    { status: 'NotDoingIt', count: statusCounts.NotDoingIt },\r\n  ];\r\n\r\n  const series = [{\r\n    data: chartData.map((item) => item.count),\r\n    label: 'Count',\r\n    id: 'countId',\r\n  }];\r\n\r\n  const xLabels = chartData.map((item) => item.status);\r\n\r\n  if (loading) return <p>Loading...</p>;\r\n  if (error) return <p>Error fetching data</p>;\r\n\r\n  return (\r\n    <div className='content statistics'> \r\n      <h3>Your situation</h3>\r\n      <br />\r\n      <br />\r\n      <span>\r\n          Be proud of your progress.\r\n      </span>\r\n      <br />\r\n      <br />\r\n      <ChartContainer width={500} height={300} series={series}>\r\n        <BarPlot \r\n          data={chartData.map((item) => item.count)} \r\n          label=\"Count\" \r\n          id=\"countId\" \r\n        />\r\n        <ChartsXAxis \r\n          data={xLabels} \r\n          scaleType=\"band\" \r\n          categoryGapRatio={0.3} \r\n          barGapRatio={0.1} \r\n        />\r\n        <ChartsYAxis />\r\n        <ChartsTooltip />\r\n        <ChartsLegend />\r\n      </ChartContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Statistics;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}