{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useTheme } from '@mui/material/styles';\nimport barSeriesFormatter from '../BarChart/formatter';\nimport scatterSeriesFormatter from '../ScatterChart/formatter';\nimport lineSeriesFormatter from '../LineChart/formatter';\nimport pieSeriesFormatter from '../PieChart/formatter';\nimport { defaultizeColor } from '../internals/defaultizeColor';\nimport { blueberryTwilightPalette } from '../colorPalettes';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const SeriesContext = /*#__PURE__*/React.createContext({});\nif (process.env.NODE_ENV !== 'production') {\n  SeriesContext.displayName = 'SeriesContext';\n}\nconst seriesTypeFormatter = {\n  bar: barSeriesFormatter,\n  scatter: scatterSeriesFormatter,\n  line: lineSeriesFormatter,\n  pie: pieSeriesFormatter\n};\n\n/**\r\n * This methods is the interface between what the developer is providing and what components receives\r\n * To simplify the components behaviors, it groups series by type, such that LinePlots props are not updated if some line data are modified\r\n * It also add defaultized values such as the ids, colors\r\n * @param series The array of series provided by devs\r\n * @param colors The color palette used to defaultize series colors\r\n * @returns An object structuring all the series by type.\r\n */\nconst formatSeries = (series, colors, dataset) => {\n  // Group series by type\n  const seriesGroups = {};\n  series.forEach((seriesData, seriesIndex) => {\n    const {\n      id = `auto-generated-id-${seriesIndex}`,\n      type\n    } = seriesData;\n    if (seriesGroups[type] === undefined) {\n      seriesGroups[type] = {\n        series: {},\n        seriesOrder: []\n      };\n    }\n    if (seriesGroups[type]?.series[id] !== undefined) {\n      throw new Error(`MUI X Charts: series' id \"${id}\" is not unique.`);\n    }\n    seriesGroups[type].series[id] = _extends({\n      id\n    }, defaultizeColor(seriesData, seriesIndex, colors));\n    seriesGroups[type].seriesOrder.push(id);\n  });\n  const formattedSeries = {};\n  // Apply formater on a type group\n  Object.keys(seriesTypeFormatter).forEach(type => {\n    if (seriesGroups[type] !== undefined) {\n      formattedSeries[type] = seriesTypeFormatter[type]?.(seriesGroups[type], dataset) ?? seriesGroups[type];\n    }\n  });\n  return formattedSeries;\n};\nfunction SeriesContextProvider(props) {\n  const {\n    series,\n    dataset,\n    colors = blueberryTwilightPalette,\n    children\n  } = props;\n  const theme = useTheme();\n  const formattedSeries = React.useMemo(() => formatSeries(series, typeof colors === 'function' ? colors(theme.palette.mode) : colors, dataset), [series, colors, theme.palette.mode, dataset]);\n  return /*#__PURE__*/_jsx(SeriesContext.Provider, {\n    value: formattedSeries,\n    children: children\n  });\n}\nexport { SeriesContextProvider };","map":{"version":3,"names":["_extends","React","useTheme","barSeriesFormatter","scatterSeriesFormatter","lineSeriesFormatter","pieSeriesFormatter","defaultizeColor","blueberryTwilightPalette","jsx","_jsx","SeriesContext","createContext","process","env","NODE_ENV","displayName","seriesTypeFormatter","bar","scatter","line","pie","formatSeries","series","colors","dataset","seriesGroups","forEach","seriesData","seriesIndex","id","type","undefined","seriesOrder","Error","push","formattedSeries","Object","keys","SeriesContextProvider","props","children","theme","useMemo","palette","mode","Provider","value"],"sources":["C:/Users/maria/Desktop/Loppuprojekti/frontend/node_modules/@mui/x-charts/esm/context/SeriesContextProvider.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport * as React from 'react';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport barSeriesFormatter from '../BarChart/formatter';\r\nimport scatterSeriesFormatter from '../ScatterChart/formatter';\r\nimport lineSeriesFormatter from '../LineChart/formatter';\r\nimport pieSeriesFormatter from '../PieChart/formatter';\r\nimport { defaultizeColor } from '../internals/defaultizeColor';\r\nimport { blueberryTwilightPalette } from '../colorPalettes';\r\nimport { jsx as _jsx } from \"react/jsx-runtime\";\r\nexport const SeriesContext = /*#__PURE__*/React.createContext({});\r\nif (process.env.NODE_ENV !== 'production') {\r\n  SeriesContext.displayName = 'SeriesContext';\r\n}\r\nconst seriesTypeFormatter = {\r\n  bar: barSeriesFormatter,\r\n  scatter: scatterSeriesFormatter,\r\n  line: lineSeriesFormatter,\r\n  pie: pieSeriesFormatter\r\n};\r\n\r\n/**\r\n * This methods is the interface between what the developer is providing and what components receives\r\n * To simplify the components behaviors, it groups series by type, such that LinePlots props are not updated if some line data are modified\r\n * It also add defaultized values such as the ids, colors\r\n * @param series The array of series provided by devs\r\n * @param colors The color palette used to defaultize series colors\r\n * @returns An object structuring all the series by type.\r\n */\r\nconst formatSeries = (series, colors, dataset) => {\r\n  // Group series by type\r\n  const seriesGroups = {};\r\n  series.forEach((seriesData, seriesIndex) => {\r\n    const {\r\n      id = `auto-generated-id-${seriesIndex}`,\r\n      type\r\n    } = seriesData;\r\n    if (seriesGroups[type] === undefined) {\r\n      seriesGroups[type] = {\r\n        series: {},\r\n        seriesOrder: []\r\n      };\r\n    }\r\n    if (seriesGroups[type]?.series[id] !== undefined) {\r\n      throw new Error(`MUI X Charts: series' id \"${id}\" is not unique.`);\r\n    }\r\n    seriesGroups[type].series[id] = _extends({\r\n      id\r\n    }, defaultizeColor(seriesData, seriesIndex, colors));\r\n    seriesGroups[type].seriesOrder.push(id);\r\n  });\r\n  const formattedSeries = {};\r\n  // Apply formater on a type group\r\n  Object.keys(seriesTypeFormatter).forEach(type => {\r\n    if (seriesGroups[type] !== undefined) {\r\n      formattedSeries[type] = seriesTypeFormatter[type]?.(seriesGroups[type], dataset) ?? seriesGroups[type];\r\n    }\r\n  });\r\n  return formattedSeries;\r\n};\r\nfunction SeriesContextProvider(props) {\r\n  const {\r\n    series,\r\n    dataset,\r\n    colors = blueberryTwilightPalette,\r\n    children\r\n  } = props;\r\n  const theme = useTheme();\r\n  const formattedSeries = React.useMemo(() => formatSeries(series, typeof colors === 'function' ? colors(theme.palette.mode) : colors, dataset), [series, colors, theme.palette.mode, dataset]);\r\n  return /*#__PURE__*/_jsx(SeriesContext.Provider, {\r\n    value: formattedSeries,\r\n    children: children\r\n  });\r\n}\r\nexport { SeriesContextProvider };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}