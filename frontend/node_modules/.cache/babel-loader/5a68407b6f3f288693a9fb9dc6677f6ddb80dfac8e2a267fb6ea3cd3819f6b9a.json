{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { unstable_useEnhancedEffect as useEnhancedEffect, unstable_useEventCallback as useEventCallback } from '@mui/utils';\nimport useLazyRef from '@mui/utils/useLazyRef';\nimport useTimeout from '@mui/utils/useTimeout';\nimport { useTheme } from '@mui/material/styles';\nimport { useGridPrivateApiContext } from '../../utils/useGridPrivateApiContext';\nimport { useGridRootProps } from '../../utils/useGridRootProps';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { useResizeObserver } from '../../utils/useResizeObserver';\nimport { useRunOnce } from '../../utils/useRunOnce';\nimport { gridVisibleColumnDefinitionsSelector, gridVisiblePinnedColumnDefinitionsSelector, gridColumnPositionsSelector, gridHasColSpanSelector } from '../columns/gridColumnsSelector';\nimport { gridDimensionsSelector } from '../dimensions/gridDimensionsSelectors';\nimport { gridPinnedRowsSelector } from '../rows/gridRowsSelector';\nimport { gridFocusCellSelector, gridTabIndexCellSelector } from '../focus/gridFocusStateSelector';\nimport { useGridVisibleRows, getVisibleRows } from '../../utils/useGridVisibleRows';\nimport { useGridApiEventHandler } from '../../utils';\nimport { clamp, range } from '../../../utils/utils';\nimport { selectedIdsLookupSelector } from '../rowSelection/gridRowSelectionSelector';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nimport { getFirstNonSpannedColumnToRender } from '../columns/gridColumnsUtils';\nimport { getMinimalContentHeight } from '../rows/gridRowsUtils';\nimport { gridRenderContextSelector, gridVirtualizationEnabledSelector, gridVirtualizationColumnEnabledSelector } from './gridVirtualizationSelectors';\nimport { EMPTY_RENDER_CONTEXT } from './useGridVirtualization';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst MINIMUM_COLUMN_WIDTH = 50;\nvar ScrollDirection = /*#__PURE__*/function (ScrollDirection) {\n  ScrollDirection[ScrollDirection[\"NONE\"] = 0] = \"NONE\";\n  ScrollDirection[ScrollDirection[\"UP\"] = 1] = \"UP\";\n  ScrollDirection[ScrollDirection[\"DOWN\"] = 2] = \"DOWN\";\n  ScrollDirection[ScrollDirection[\"LEFT\"] = 3] = \"LEFT\";\n  ScrollDirection[ScrollDirection[\"RIGHT\"] = 4] = \"RIGHT\";\n  return ScrollDirection;\n}(ScrollDirection || {});\nconst EMPTY_SCROLL_POSITION = {\n  top: 0,\n  left: 0\n};\nexport const EMPTY_DETAIL_PANELS = Object.freeze(new Map());\nconst createScrollCache = (mode, rowBufferPx, columnBufferPx, verticalBuffer, horizontalBuffer) => ({\n  direction: ScrollDirection.NONE,\n  buffer: bufferForDirection(mode, ScrollDirection.NONE, rowBufferPx, columnBufferPx, verticalBuffer, horizontalBuffer)\n});\nconst isJSDOM = typeof window !== 'undefined' ? /jsdom/.test(window.navigator.userAgent) : false;\nexport const useGridVirtualScroller = () => {\n  const apiRef = useGridPrivateApiContext();\n  const rootProps = useGridRootProps();\n  const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  const enabled = useGridSelector(apiRef, gridVirtualizationEnabledSelector) && !isJSDOM;\n  const enabledForColumns = useGridSelector(apiRef, gridVirtualizationColumnEnabledSelector) && !isJSDOM;\n  const dimensions = useGridSelector(apiRef, gridDimensionsSelector);\n  const outerSize = dimensions.viewportOuterSize;\n  const pinnedRows = useGridSelector(apiRef, gridPinnedRowsSelector);\n  const pinnedColumns = useGridSelector(apiRef, gridVisiblePinnedColumnDefinitionsSelector);\n  const hasBottomPinnedRows = pinnedRows.bottom.length > 0;\n  const [panels, setPanels] = React.useState(EMPTY_DETAIL_PANELS);\n  const theme = useTheme();\n  const cellFocus = useGridSelector(apiRef, gridFocusCellSelector);\n  const cellTabIndex = useGridSelector(apiRef, gridTabIndexCellSelector);\n  const rowsMeta = useGridSelector(apiRef, gridRowsMetaSelector);\n  const selectedRowsLookup = useGridSelector(apiRef, selectedIdsLookupSelector);\n  const currentPage = useGridVisibleRows(apiRef, rootProps);\n  const gridRootRef = apiRef.current.rootElementRef;\n  const mainRef = apiRef.current.mainElementRef;\n  const scrollerRef = apiRef.current.virtualScrollerRef;\n  const scrollbarVerticalRef = React.useRef(null);\n  const scrollbarHorizontalRef = React.useRef(null);\n  const contentHeight = dimensions.contentSize.height;\n  const columnsTotalWidth = dimensions.columnsTotalWidth;\n  const hasColSpan = useGridSelector(apiRef, gridHasColSpanSelector);\n  useResizeObserver(mainRef, () => apiRef.current.resize());\n\n  /*\r\n   * Scroll context logic\r\n   * ====================\r\n   * We only render the cells contained in the `renderContext`. However, when the user starts scrolling the grid\r\n   * in a direction, we want to render as many cells as possible in that direction, as to avoid presenting white\r\n   * areas if the user scrolls too fast/far and the viewport ends up in a region we haven't rendered yet. To render\r\n   * more cells, we store some offsets to add to the viewport in `scrollCache.buffer`. Those offsets make the render\r\n   * context wider in the direction the user is going, but also makes the buffer around the viewport `0` for the\r\n   * dimension (horizontal or vertical) in which the user is not scrolling. So if the normal viewport is 8 columns\r\n   * wide, with a 1 column buffer (10 columns total), then we want it to be exactly 8 columns wide during vertical\r\n   * scroll.\r\n   * However, we don't want the rows in the old context to re-render from e.g. 10 columns to 8 columns, because that's\r\n   * work that's not necessary. Thus we store the context at the start of the scroll in `frozenContext`, and the rows\r\n   * that are part of this old context will keep their same render context as to avoid re-rendering.\r\n   */\n  const scrollPosition = React.useRef(EMPTY_SCROLL_POSITION);\n  const previousContextScrollPosition = React.useRef(EMPTY_SCROLL_POSITION);\n  const previousRowContext = React.useRef(EMPTY_RENDER_CONTEXT);\n  const renderContext = useGridSelector(apiRef, gridRenderContextSelector);\n  const scrollTimeout = useTimeout();\n  const frozenContext = React.useRef(undefined);\n  const scrollCache = useLazyRef(() => createScrollCache(theme.direction, rootProps.rowBufferPx, rootProps.columnBufferPx, dimensions.rowHeight * 15, MINIMUM_COLUMN_WIDTH * 6)).current;\n  const focusedCell = {\n    rowIndex: React.useMemo(() => cellFocus ? currentPage.rows.findIndex(row => row.id === cellFocus.id) : -1, [cellFocus, currentPage.rows]),\n    columnIndex: React.useMemo(() => cellFocus ? visibleColumns.findIndex(column => column.field === cellFocus.field) : -1, [cellFocus, visibleColumns])\n  };\n  const updateRenderContext = React.useCallback(nextRenderContext => {\n    if (areRenderContextsEqual(nextRenderContext, apiRef.current.state.virtualization.renderContext)) {\n      return;\n    }\n    const didRowsIntervalChange = nextRenderContext.firstRowIndex !== previousRowContext.current.firstRowIndex || nextRenderContext.lastRowIndex !== previousRowContext.current.lastRowIndex;\n    apiRef.current.setState(state => {\n      return _extends({}, state, {\n        virtualization: _extends({}, state.virtualization, {\n          renderContext: nextRenderContext\n        })\n      });\n    });\n\n    // The lazy-loading hook is listening to `renderedRowsIntervalChange`,\n    // but only does something if the dimensions are also available.\n    // So we wait until we have valid dimensions before publishing the first event.\n    if (dimensions.isReady && didRowsIntervalChange) {\n      previousRowContext.current = nextRenderContext;\n      apiRef.current.publishEvent('renderedRowsIntervalChange', nextRenderContext);\n    }\n    previousContextScrollPosition.current = scrollPosition.current;\n  }, [apiRef, dimensions.isReady]);\n  const triggerUpdateRenderContext = () => {\n    const newScroll = {\n      top: scrollerRef.current.scrollTop,\n      left: scrollerRef.current.scrollLeft\n    };\n    const dx = newScroll.left - scrollPosition.current.left;\n    const dy = newScroll.top - scrollPosition.current.top;\n    const isScrolling = dx !== 0 || dy !== 0;\n    scrollPosition.current = newScroll;\n    const direction = isScrolling ? directionForDelta(dx, dy) : ScrollDirection.NONE;\n\n    // Since previous render, we have scrolled...\n    const rowScroll = Math.abs(scrollPosition.current.top - previousContextScrollPosition.current.top);\n    const columnScroll = Math.abs(scrollPosition.current.left - previousContextScrollPosition.current.left);\n\n    // PERF: use the computed minimum column width instead of a static one\n    const didCrossThreshold = rowScroll >= dimensions.rowHeight || columnScroll >= MINIMUM_COLUMN_WIDTH;\n    const didChangeDirection = scrollCache.direction !== direction;\n    const shouldUpdate = didCrossThreshold || didChangeDirection;\n    if (!shouldUpdate) {\n      return renderContext;\n    }\n\n    // Render a new context\n\n    if (didChangeDirection) {\n      switch (direction) {\n        case ScrollDirection.NONE:\n        case ScrollDirection.LEFT:\n        case ScrollDirection.RIGHT:\n          frozenContext.current = undefined;\n          break;\n        default:\n          frozenContext.current = renderContext;\n          break;\n      }\n    }\n    scrollCache.direction = direction;\n    scrollCache.buffer = bufferForDirection(theme.direction, direction, rootProps.rowBufferPx, rootProps.columnBufferPx, dimensions.rowHeight * 15, MINIMUM_COLUMN_WIDTH * 6);\n    const inputs = inputsSelector(apiRef, rootProps, enabled, enabledForColumns);\n    const nextRenderContext = computeRenderContext(inputs, scrollPosition.current, scrollCache);\n\n    // Prevents batching render context changes\n    ReactDOM.flushSync(() => {\n      updateRenderContext(nextRenderContext);\n    });\n    scrollTimeout.start(1000, triggerUpdateRenderContext);\n    return nextRenderContext;\n  };\n  const forceUpdateRenderContext = () => {\n    const inputs = inputsSelector(apiRef, rootProps, enabled, enabledForColumns);\n    const nextRenderContext = computeRenderContext(inputs, scrollPosition.current, scrollCache);\n    updateRenderContext(nextRenderContext);\n  };\n  const handleScroll = useEventCallback(event => {\n    const {\n      scrollTop,\n      scrollLeft\n    } = event.currentTarget;\n\n    // On iOS and macOS, negative offsets are possible when swiping past the start\n    if (scrollTop < 0) {\n      return;\n    }\n    if (theme.direction === 'ltr') {\n      if (scrollLeft < 0) {\n        return;\n      }\n    }\n    if (theme.direction === 'rtl') {\n      if (scrollLeft > 0) {\n        return;\n      }\n    }\n    const nextRenderContext = triggerUpdateRenderContext();\n    apiRef.current.publishEvent('scrollPositionChange', {\n      top: scrollTop,\n      left: scrollLeft,\n      renderContext: nextRenderContext\n    });\n  });\n  const handleWheel = useEventCallback(event => {\n    apiRef.current.publishEvent('virtualScrollerWheel', {}, event);\n  });\n  const handleTouchMove = useEventCallback(event => {\n    apiRef.current.publishEvent('virtualScrollerTouchMove', {}, event);\n  });\n  const getRows = (params = {}) => {\n    if (!params.rows && !currentPage.range) {\n      return [];\n    }\n    const baseRenderContext = params.renderContext ?? renderContext;\n    const isLastSection = !hasBottomPinnedRows && params.position === undefined || hasBottomPinnedRows && params.position === 'bottom';\n    const isPinnedSection = params.position !== undefined;\n    let rowIndexOffset;\n    // FIXME: Why is the switch check exhaustiveness not validated with typescript-eslint?\n    // eslint-disable-next-line default-case\n    switch (params.position) {\n      case 'top':\n        rowIndexOffset = 0;\n        break;\n      case 'bottom':\n        rowIndexOffset = pinnedRows.top.length + currentPage.rows.length;\n        break;\n      case undefined:\n        rowIndexOffset = pinnedRows.top.length;\n        break;\n    }\n    const rowModels = params.rows ?? currentPage.rows;\n    const firstRowToRender = baseRenderContext.firstRowIndex;\n    const lastRowToRender = Math.min(baseRenderContext.lastRowIndex, rowModels.length);\n    const rowIndexes = params.rows ? range(0, params.rows.length) : range(firstRowToRender, lastRowToRender);\n    let virtualRowIndex = -1;\n    if (!isPinnedSection && focusedCell.rowIndex !== -1) {\n      if (focusedCell.rowIndex < firstRowToRender) {\n        virtualRowIndex = focusedCell.rowIndex;\n        rowIndexes.unshift(virtualRowIndex);\n      }\n      if (focusedCell.rowIndex >= lastRowToRender) {\n        virtualRowIndex = focusedCell.rowIndex;\n        rowIndexes.push(virtualRowIndex);\n      }\n    }\n    const rows = [];\n    const rowProps = rootProps.slotProps?.row;\n    const columnPositions = gridColumnPositionsSelector(apiRef);\n    rowIndexes.forEach(rowIndexInPage => {\n      const {\n        id,\n        model\n      } = rowModels[rowIndexInPage];\n\n      // NOTE: This is an expensive feature, the colSpan code could be optimized.\n      if (hasColSpan) {\n        const minFirstColumn = pinnedColumns.left.length;\n        const maxLastColumn = visibleColumns.length - pinnedColumns.right.length;\n        apiRef.current.calculateColSpan({\n          rowId: id,\n          minFirstColumn,\n          maxLastColumn,\n          columns: visibleColumns\n        });\n        if (pinnedColumns.left.length > 0) {\n          apiRef.current.calculateColSpan({\n            rowId: id,\n            minFirstColumn: 0,\n            maxLastColumn: pinnedColumns.left.length,\n            columns: visibleColumns\n          });\n        }\n        if (pinnedColumns.right.length > 0) {\n          apiRef.current.calculateColSpan({\n            rowId: id,\n            minFirstColumn: visibleColumns.length - pinnedColumns.right.length,\n            maxLastColumn: visibleColumns.length,\n            columns: visibleColumns\n          });\n        }\n      }\n      const hasFocus = cellFocus?.id === id;\n      const baseRowHeight = !apiRef.current.rowHasAutoHeight(id) ? apiRef.current.unstable_getRowHeight(id) : 'auto';\n      let isSelected;\n      if (selectedRowsLookup[id] == null) {\n        isSelected = false;\n      } else {\n        isSelected = apiRef.current.isRowSelectable(id);\n      }\n      let isFirstVisible = false;\n      if (params.position === undefined) {\n        isFirstVisible = rowIndexInPage === 0;\n      }\n      let isLastVisible = false;\n      if (isLastSection) {\n        if (!isPinnedSection) {\n          const lastIndex = currentPage.rows.length - 1;\n          const isLastVisibleRowIndex = rowIndexInPage === lastIndex;\n          if (isLastVisibleRowIndex) {\n            isLastVisible = true;\n          }\n        } else {\n          isLastVisible = rowIndexInPage === rowModels.length - 1;\n        }\n      }\n      const isVirtualRow = rowIndexInPage === virtualRowIndex;\n      const isNotVisible = isVirtualRow;\n      let tabbableCell = null;\n      if (cellTabIndex !== null && cellTabIndex.id === id) {\n        const cellParams = apiRef.current.getCellParams(id, cellTabIndex.field);\n        tabbableCell = cellParams.cellMode === 'view' ? cellTabIndex.field : null;\n      }\n      let currentRenderContext = baseRenderContext;\n      if (!isPinnedSection && frozenContext.current && rowIndexInPage >= frozenContext.current.firstRowIndex && rowIndexInPage < frozenContext.current.lastRowIndex) {\n        currentRenderContext = frozenContext.current;\n      }\n      const offsetLeft = computeOffsetLeft(columnPositions, currentRenderContext, theme.direction, pinnedColumns.left.length);\n      const rowIndex = (currentPage?.range?.firstRowIndex || 0) + rowIndexOffset + rowIndexInPage;\n      rows.push( /*#__PURE__*/_jsx(rootProps.slots.row, _extends({\n        row: model,\n        rowId: id,\n        index: rowIndex,\n        selected: isSelected,\n        offsetTop: params.rows ? undefined : rowsMeta.positions[rowIndexInPage],\n        offsetLeft: offsetLeft,\n        dimensions: dimensions,\n        rowHeight: baseRowHeight,\n        tabbableCell: tabbableCell,\n        pinnedColumns: pinnedColumns,\n        visibleColumns: visibleColumns,\n        renderContext: currentRenderContext,\n        focusedColumnIndex: hasFocus ? focusedCell.columnIndex : undefined,\n        isFirstVisible: isFirstVisible,\n        isLastVisible: isLastVisible,\n        isNotVisible: isNotVisible\n      }, rowProps), id));\n      const panel = panels.get(id);\n      if (panel) {\n        rows.push(panel);\n      }\n      if (isLastVisible) {\n        rows.push(apiRef.current.getInfiniteLoadingTriggerElement?.({\n          lastRowId: id\n        }));\n      }\n    });\n    return rows;\n  };\n  const needsHorizontalScrollbar = outerSize.width && columnsTotalWidth >= outerSize.width;\n  const scrollerStyle = React.useMemo(() => ({\n    overflowX: !needsHorizontalScrollbar ? 'hidden' : undefined,\n    overflowY: rootProps.autoHeight ? 'hidden' : undefined\n  }), [needsHorizontalScrollbar, rootProps.autoHeight]);\n  const contentSize = React.useMemo(() => {\n    // In cases where the columns exceed the available width,\n    // the horizontal scrollbar should be shown even when there're no rows.\n    // Keeping 1px as minimum height ensures that the scrollbar will visible if necessary.\n    const height = Math.max(contentHeight, 1);\n    const size = {\n      width: needsHorizontalScrollbar ? columnsTotalWidth : 'auto',\n      height\n    };\n    if (rootProps.autoHeight) {\n      if (currentPage.rows.length === 0) {\n        size.height = getMinimalContentHeight(apiRef); // Give room to show the overlay when there no rows.\n      } else {\n        size.height = contentHeight;\n      }\n    }\n    return size;\n  }, [apiRef, columnsTotalWidth, contentHeight, needsHorizontalScrollbar, rootProps.autoHeight, currentPage.rows.length]);\n  React.useEffect(() => {\n    apiRef.current.publishEvent('virtualScrollerContentSizeChange');\n  }, [apiRef, contentSize]);\n  useEnhancedEffect(() => {\n    // FIXME: Is this really necessary?\n    apiRef.current.resize();\n  }, [apiRef, rowsMeta.currentPageTotalHeight]);\n  useEnhancedEffect(() => {\n    if (enabled) {\n      // TODO a scroll reset should not be necessary\n      scrollerRef.current.scrollLeft = 0;\n      scrollerRef.current.scrollTop = 0;\n    }\n  }, [enabled, gridRootRef, scrollerRef]);\n  useRunOnce(outerSize.width !== 0, () => {\n    const inputs = inputsSelector(apiRef, rootProps, enabled, enabledForColumns);\n    const initialRenderContext = computeRenderContext(inputs, scrollPosition.current, scrollCache);\n    updateRenderContext(initialRenderContext);\n    apiRef.current.publishEvent('scrollPositionChange', {\n      top: scrollPosition.current.top,\n      left: scrollPosition.current.left,\n      renderContext: initialRenderContext\n    });\n  });\n  apiRef.current.register('private', {\n    updateRenderContext: forceUpdateRenderContext\n  });\n  useGridApiEventHandler(apiRef, 'columnsChange', forceUpdateRenderContext);\n  useGridApiEventHandler(apiRef, 'filteredRowsSet', forceUpdateRenderContext);\n  useGridApiEventHandler(apiRef, 'rowExpansionChange', forceUpdateRenderContext);\n  return {\n    renderContext,\n    setPanels,\n    getRows,\n    getContainerProps: () => ({\n      ref: mainRef\n    }),\n    getScrollerProps: () => ({\n      ref: scrollerRef,\n      tabIndex: -1,\n      onScroll: handleScroll,\n      onWheel: handleWheel,\n      onTouchMove: handleTouchMove,\n      style: scrollerStyle,\n      role: 'presentation'\n    }),\n    getContentProps: () => ({\n      style: contentSize,\n      role: 'presentation'\n    }),\n    getRenderZoneProps: () => ({\n      role: 'rowgroup'\n    }),\n    getScrollbarVerticalProps: () => ({\n      ref: scrollbarVerticalRef,\n      role: 'presentation'\n    }),\n    getScrollbarHorizontalProps: () => ({\n      ref: scrollbarHorizontalRef,\n      role: 'presentation'\n    })\n  };\n};\nfunction inputsSelector(apiRef, rootProps, enabled, enabledForColumns) {\n  const dimensions = gridDimensionsSelector(apiRef.current.state);\n  const currentPage = getVisibleRows(apiRef, rootProps);\n  const visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef);\n  const lastRowId = apiRef.current.state.rows.dataRowIds.at(-1);\n  const lastColumn = visibleColumns.at(-1);\n  return {\n    enabled,\n    enabledForColumns,\n    apiRef,\n    autoHeight: rootProps.autoHeight,\n    rowBufferPx: rootProps.rowBufferPx,\n    columnBufferPx: rootProps.columnBufferPx,\n    leftPinnedWidth: dimensions.leftPinnedWidth,\n    columnsTotalWidth: dimensions.columnsTotalWidth,\n    viewportInnerWidth: dimensions.viewportInnerSize.width,\n    viewportInnerHeight: dimensions.viewportInnerSize.height,\n    lastRowHeight: lastRowId !== undefined ? apiRef.current.unstable_getRowHeight(lastRowId) : 0,\n    lastColumnWidth: lastColumn?.computedWidth ?? 0,\n    rowsMeta: gridRowsMetaSelector(apiRef.current.state),\n    columnPositions: gridColumnPositionsSelector(apiRef),\n    rows: currentPage.rows,\n    range: currentPage.range,\n    pinnedColumns: gridVisiblePinnedColumnDefinitionsSelector(apiRef),\n    visibleColumns\n  };\n}\nfunction computeRenderContext(inputs, scrollPosition, scrollCache) {\n  let renderContext;\n  if (!inputs.enabled) {\n    renderContext = {\n      firstRowIndex: 0,\n      lastRowIndex: inputs.rows.length,\n      firstColumnIndex: 0,\n      lastColumnIndex: inputs.visibleColumns.length\n    };\n  } else {\n    const {\n      top,\n      left\n    } = scrollPosition;\n    const realLeft = Math.abs(left) + inputs.leftPinnedWidth;\n\n    // Clamp the value because the search may return an index out of bounds.\n    // In the last index, this is not needed because Array.slice doesn't include it.\n    const firstRowIndex = Math.min(getNearestIndexToRender(inputs, top, {\n      atStart: true,\n      lastPosition: inputs.rowsMeta.positions[inputs.rowsMeta.positions.length - 1] + inputs.lastRowHeight\n    }), inputs.rowsMeta.positions.length - 1);\n    const lastRowIndex = inputs.autoHeight ? firstRowIndex + inputs.rows.length : getNearestIndexToRender(inputs, top + inputs.viewportInnerHeight);\n    let firstColumnIndex = 0;\n    let lastColumnIndex = inputs.columnPositions.length;\n    if (inputs.enabledForColumns) {\n      let hasRowWithAutoHeight = false;\n      const [firstRowToRender, lastRowToRender] = getIndexesToRender({\n        firstIndex: firstRowIndex,\n        lastIndex: lastRowIndex,\n        minFirstIndex: 0,\n        maxLastIndex: inputs.rows.length,\n        bufferBefore: scrollCache.buffer.rowBefore,\n        bufferAfter: scrollCache.buffer.rowAfter,\n        positions: inputs.rowsMeta.positions,\n        lastSize: inputs.lastRowHeight\n      });\n      for (let i = firstRowToRender; i < lastRowToRender && !hasRowWithAutoHeight; i += 1) {\n        const row = inputs.rows[i];\n        hasRowWithAutoHeight = inputs.apiRef.current.rowHasAutoHeight(row.id);\n      }\n      if (!hasRowWithAutoHeight) {\n        firstColumnIndex = binarySearch(realLeft, inputs.columnPositions, {\n          atStart: true,\n          lastPosition: inputs.columnsTotalWidth\n        });\n        lastColumnIndex = binarySearch(realLeft + inputs.viewportInnerWidth, inputs.columnPositions);\n      }\n    }\n    renderContext = {\n      firstRowIndex,\n      lastRowIndex,\n      firstColumnIndex,\n      lastColumnIndex\n    };\n  }\n  const actualRenderContext = deriveRenderContext(inputs, renderContext, scrollCache);\n  return actualRenderContext;\n}\nfunction getNearestIndexToRender(inputs, offset, options) {\n  const lastMeasuredIndexRelativeToAllRows = inputs.apiRef.current.getLastMeasuredRowIndex();\n  let allRowsMeasured = lastMeasuredIndexRelativeToAllRows === Infinity;\n  if (inputs.range?.lastRowIndex && !allRowsMeasured) {\n    // Check if all rows in this page are already measured\n    allRowsMeasured = lastMeasuredIndexRelativeToAllRows >= inputs.range.lastRowIndex;\n  }\n  const lastMeasuredIndexRelativeToCurrentPage = clamp(lastMeasuredIndexRelativeToAllRows - (inputs.range?.firstRowIndex || 0), 0, inputs.rowsMeta.positions.length);\n  if (allRowsMeasured || inputs.rowsMeta.positions[lastMeasuredIndexRelativeToCurrentPage] >= offset) {\n    // If all rows were measured (when no row has \"auto\" as height) or all rows before the offset\n    // were measured, then use a binary search because it's faster.\n    return binarySearch(offset, inputs.rowsMeta.positions, options);\n  }\n\n  // Otherwise, use an exponential search.\n  // If rows have \"auto\" as height, their positions will be based on estimated heights.\n  // In this case, we can skip several steps until we find a position higher than the offset.\n  // Inspired by https://github.com/bvaughn/react-virtualized/blob/master/source/Grid/utils/CellSizeAndPositionManager.js\n  return exponentialSearch(offset, inputs.rowsMeta.positions, lastMeasuredIndexRelativeToCurrentPage, options);\n}\n\n/**\r\n * Accepts as input a raw render context (the area visible in the viewport) and adds\r\n * computes the actual render context based on pinned elements, buffer dimensions and\r\n * spanning.\r\n */\nfunction deriveRenderContext(inputs, nextRenderContext, scrollCache) {\n  const [firstRowToRender, lastRowToRender] = getIndexesToRender({\n    firstIndex: nextRenderContext.firstRowIndex,\n    lastIndex: nextRenderContext.lastRowIndex,\n    minFirstIndex: 0,\n    maxLastIndex: inputs.rows.length,\n    bufferBefore: scrollCache.buffer.rowBefore,\n    bufferAfter: scrollCache.buffer.rowAfter,\n    positions: inputs.rowsMeta.positions,\n    lastSize: inputs.lastRowHeight\n  });\n  const [initialFirstColumnToRender, lastColumnToRender] = getIndexesToRender({\n    firstIndex: nextRenderContext.firstColumnIndex,\n    lastIndex: nextRenderContext.lastColumnIndex,\n    minFirstIndex: inputs.pinnedColumns.left.length,\n    maxLastIndex: inputs.visibleColumns.length - inputs.pinnedColumns.right.length,\n    bufferBefore: scrollCache.buffer.columnBefore,\n    bufferAfter: scrollCache.buffer.columnAfter,\n    positions: inputs.columnPositions,\n    lastSize: inputs.lastColumnWidth\n  });\n  const firstColumnToRender = getFirstNonSpannedColumnToRender({\n    firstColumnToRender: initialFirstColumnToRender,\n    apiRef: inputs.apiRef,\n    firstRowToRender,\n    lastRowToRender,\n    visibleRows: inputs.rows\n  });\n  return {\n    firstRowIndex: firstRowToRender,\n    lastRowIndex: lastRowToRender,\n    firstColumnIndex: firstColumnToRender,\n    lastColumnIndex: lastColumnToRender\n  };\n}\n/**\r\n * Use binary search to avoid looping through all possible positions.\r\n * The `options.atStart` provides the possibility to match for the first element that\r\n * intersects the screen, even if said element's start position is before `offset`. In\r\n * other words, we search for `offset + width`.\r\n */\nfunction binarySearch(offset, positions, options = undefined, sliceStart = 0, sliceEnd = positions.length) {\n  if (positions.length <= 0) {\n    return -1;\n  }\n  if (sliceStart >= sliceEnd) {\n    return sliceStart;\n  }\n  const pivot = sliceStart + Math.floor((sliceEnd - sliceStart) / 2);\n  const position = positions[pivot];\n  let isBefore;\n  if (options?.atStart) {\n    const width = (pivot === positions.length - 1 ? options.lastPosition : positions[pivot + 1]) - position;\n    isBefore = offset - width < position;\n  } else {\n    isBefore = offset <= position;\n  }\n  return isBefore ? binarySearch(offset, positions, options, sliceStart, pivot) : binarySearch(offset, positions, options, pivot + 1, sliceEnd);\n}\nfunction exponentialSearch(offset, positions, index, options = undefined) {\n  let interval = 1;\n  while (index < positions.length && Math.abs(positions[index]) < offset) {\n    index += interval;\n    interval *= 2;\n  }\n  return binarySearch(offset, positions, options, Math.floor(index / 2), Math.min(index, positions.length));\n}\nfunction getIndexesToRender({\n  firstIndex,\n  lastIndex,\n  bufferBefore,\n  bufferAfter,\n  minFirstIndex,\n  maxLastIndex,\n  positions,\n  lastSize\n}) {\n  const firstPosition = positions[firstIndex] - bufferBefore;\n  const lastPosition = positions[lastIndex] + bufferAfter;\n  const firstIndexPadded = binarySearch(firstPosition, positions, {\n    atStart: true,\n    lastPosition: positions[positions.length - 1] + lastSize\n  });\n  const lastIndexPadded = binarySearch(lastPosition, positions);\n  return [clamp(firstIndexPadded, minFirstIndex, maxLastIndex), clamp(lastIndexPadded, minFirstIndex, maxLastIndex)];\n}\nexport function areRenderContextsEqual(context1, context2) {\n  if (context1 === context2) {\n    return true;\n  }\n  return context1.firstRowIndex === context2.firstRowIndex && context1.lastRowIndex === context2.lastRowIndex && context1.firstColumnIndex === context2.firstColumnIndex && context1.lastColumnIndex === context2.lastColumnIndex;\n}\nexport function computeOffsetLeft(columnPositions, renderContext, direction, pinnedLeftLength) {\n  const factor = direction === 'ltr' ? 1 : -1;\n  const left = factor * (columnPositions[renderContext.firstColumnIndex] ?? 0) - (columnPositions[pinnedLeftLength] ?? 0);\n  return Math.abs(left);\n}\nfunction directionForDelta(dx, dy) {\n  if (dx === 0 && dy === 0) {\n    return ScrollDirection.NONE;\n  }\n  /* eslint-disable */\n  if (Math.abs(dy) >= Math.abs(dx)) {\n    if (dy > 0) {\n      return ScrollDirection.DOWN;\n    } else {\n      return ScrollDirection.UP;\n    }\n  } else {\n    if (dx > 0) {\n      return ScrollDirection.RIGHT;\n    } else {\n      return ScrollDirection.LEFT;\n    }\n  }\n  /* eslint-enable */\n}\nfunction bufferForDirection(mode, direction, rowBufferPx, columnBufferPx, verticalBuffer, horizontalBuffer) {\n  if (mode === 'rtl') {\n    switch (direction) {\n      case ScrollDirection.LEFT:\n        direction = ScrollDirection.RIGHT;\n        break;\n      case ScrollDirection.RIGHT:\n        direction = ScrollDirection.LEFT;\n        break;\n      default:\n    }\n  }\n  switch (direction) {\n    case ScrollDirection.NONE:\n      return {\n        rowAfter: rowBufferPx,\n        rowBefore: rowBufferPx,\n        columnAfter: columnBufferPx,\n        columnBefore: columnBufferPx\n      };\n    case ScrollDirection.LEFT:\n      return {\n        rowAfter: 0,\n        rowBefore: 0,\n        columnAfter: 0,\n        columnBefore: horizontalBuffer\n      };\n    case ScrollDirection.RIGHT:\n      return {\n        rowAfter: 0,\n        rowBefore: 0,\n        columnAfter: horizontalBuffer,\n        columnBefore: 0\n      };\n    case ScrollDirection.UP:\n      return {\n        rowAfter: 0,\n        rowBefore: verticalBuffer,\n        columnAfter: 0,\n        columnBefore: 0\n      };\n    case ScrollDirection.DOWN:\n      return {\n        rowAfter: verticalBuffer,\n        rowBefore: 0,\n        columnAfter: 0,\n        columnBefore: 0\n      };\n    default:\n      // eslint unable to figure out enum exhaustiveness\n      throw new Error('unreachable');\n  }\n}","map":{"version":3,"names":["_extends","React","ReactDOM","unstable_useEnhancedEffect","useEnhancedEffect","unstable_useEventCallback","useEventCallback","useLazyRef","useTimeout","useTheme","useGridPrivateApiContext","useGridRootProps","useGridSelector","useResizeObserver","useRunOnce","gridVisibleColumnDefinitionsSelector","gridVisiblePinnedColumnDefinitionsSelector","gridColumnPositionsSelector","gridHasColSpanSelector","gridDimensionsSelector","gridPinnedRowsSelector","gridFocusCellSelector","gridTabIndexCellSelector","useGridVisibleRows","getVisibleRows","useGridApiEventHandler","clamp","range","selectedIdsLookupSelector","gridRowsMetaSelector","getFirstNonSpannedColumnToRender","getMinimalContentHeight","gridRenderContextSelector","gridVirtualizationEnabledSelector","gridVirtualizationColumnEnabledSelector","EMPTY_RENDER_CONTEXT","jsx","_jsx","MINIMUM_COLUMN_WIDTH","ScrollDirection","EMPTY_SCROLL_POSITION","top","left","EMPTY_DETAIL_PANELS","Object","freeze","Map","createScrollCache","mode","rowBufferPx","columnBufferPx","verticalBuffer","horizontalBuffer","direction","NONE","buffer","bufferForDirection","isJSDOM","window","test","navigator","userAgent","useGridVirtualScroller","apiRef","rootProps","visibleColumns","enabled","enabledForColumns","dimensions","outerSize","viewportOuterSize","pinnedRows","pinnedColumns","hasBottomPinnedRows","bottom","length","panels","setPanels","useState","theme","cellFocus","cellTabIndex","rowsMeta","selectedRowsLookup","currentPage","gridRootRef","current","rootElementRef","mainRef","mainElementRef","scrollerRef","virtualScrollerRef","scrollbarVerticalRef","useRef","scrollbarHorizontalRef","contentHeight","contentSize","height","columnsTotalWidth","hasColSpan","resize","scrollPosition","previousContextScrollPosition","previousRowContext","renderContext","scrollTimeout","frozenContext","undefined","scrollCache","rowHeight","focusedCell","rowIndex","useMemo","rows","findIndex","row","id","columnIndex","column","field","updateRenderContext","useCallback","nextRenderContext","areRenderContextsEqual","state","virtualization","didRowsIntervalChange","firstRowIndex","lastRowIndex","setState","isReady","publishEvent","triggerUpdateRenderContext","newScroll","scrollTop","scrollLeft","dx","dy","isScrolling","directionForDelta","rowScroll","Math","abs","columnScroll","didCrossThreshold","didChangeDirection","shouldUpdate","LEFT","RIGHT","inputs","inputsSelector","computeRenderContext","flushSync","start","forceUpdateRenderContext","handleScroll","event","currentTarget","handleWheel","handleTouchMove","getRows","params","baseRenderContext","isLastSection","position","isPinnedSection","rowIndexOffset","rowModels","firstRowToRender","lastRowToRender","min","rowIndexes","virtualRowIndex","unshift","push","rowProps","slotProps","columnPositions","forEach","rowIndexInPage","model","minFirstColumn","maxLastColumn","right","calculateColSpan","rowId","columns","hasFocus","baseRowHeight","rowHasAutoHeight","unstable_getRowHeight","isSelected","isRowSelectable","isFirstVisible","isLastVisible","lastIndex","isLastVisibleRowIndex","isVirtualRow","isNotVisible","tabbableCell","cellParams","getCellParams","cellMode","currentRenderContext","offsetLeft","computeOffsetLeft","slots","index","selected","offsetTop","positions","focusedColumnIndex","panel","get","getInfiniteLoadingTriggerElement","lastRowId","needsHorizontalScrollbar","width","scrollerStyle","overflowX","overflowY","autoHeight","max","size","useEffect","currentPageTotalHeight","initialRenderContext","register","getContainerProps","ref","getScrollerProps","tabIndex","onScroll","onWheel","onTouchMove","style","role","getContentProps","getRenderZoneProps","getScrollbarVerticalProps","getScrollbarHorizontalProps","dataRowIds","at","lastColumn","leftPinnedWidth","viewportInnerWidth","viewportInnerSize","viewportInnerHeight","lastRowHeight","lastColumnWidth","computedWidth","firstColumnIndex","lastColumnIndex","realLeft","getNearestIndexToRender","atStart","lastPosition","hasRowWithAutoHeight","getIndexesToRender","firstIndex","minFirstIndex","maxLastIndex","bufferBefore","rowBefore","bufferAfter","rowAfter","lastSize","i","binarySearch","actualRenderContext","deriveRenderContext","offset","options","lastMeasuredIndexRelativeToAllRows","getLastMeasuredRowIndex","allRowsMeasured","Infinity","lastMeasuredIndexRelativeToCurrentPage","exponentialSearch","initialFirstColumnToRender","lastColumnToRender","columnBefore","columnAfter","firstColumnToRender","visibleRows","sliceStart","sliceEnd","pivot","floor","isBefore","interval","firstPosition","firstIndexPadded","lastIndexPadded","context1","context2","pinnedLeftLength","factor","DOWN","UP","Error"],"sources":["C:/WebSovellukset/Loppuprojekti/frontend/node_modules/@mui/x-data-grid/hooks/features/virtualization/useGridVirtualScroller.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport { unstable_useEnhancedEffect as useEnhancedEffect, unstable_useEventCallback as useEventCallback } from '@mui/utils';\r\nimport useLazyRef from '@mui/utils/useLazyRef';\r\nimport useTimeout from '@mui/utils/useTimeout';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { useGridPrivateApiContext } from '../../utils/useGridPrivateApiContext';\r\nimport { useGridRootProps } from '../../utils/useGridRootProps';\r\nimport { useGridSelector } from '../../utils/useGridSelector';\r\nimport { useResizeObserver } from '../../utils/useResizeObserver';\r\nimport { useRunOnce } from '../../utils/useRunOnce';\r\nimport { gridVisibleColumnDefinitionsSelector, gridVisiblePinnedColumnDefinitionsSelector, gridColumnPositionsSelector, gridHasColSpanSelector } from '../columns/gridColumnsSelector';\r\nimport { gridDimensionsSelector } from '../dimensions/gridDimensionsSelectors';\r\nimport { gridPinnedRowsSelector } from '../rows/gridRowsSelector';\r\nimport { gridFocusCellSelector, gridTabIndexCellSelector } from '../focus/gridFocusStateSelector';\r\nimport { useGridVisibleRows, getVisibleRows } from '../../utils/useGridVisibleRows';\r\nimport { useGridApiEventHandler } from '../../utils';\r\nimport { clamp, range } from '../../../utils/utils';\r\nimport { selectedIdsLookupSelector } from '../rowSelection/gridRowSelectionSelector';\r\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\r\nimport { getFirstNonSpannedColumnToRender } from '../columns/gridColumnsUtils';\r\nimport { getMinimalContentHeight } from '../rows/gridRowsUtils';\r\nimport { gridRenderContextSelector, gridVirtualizationEnabledSelector, gridVirtualizationColumnEnabledSelector } from './gridVirtualizationSelectors';\r\nimport { EMPTY_RENDER_CONTEXT } from './useGridVirtualization';\r\nimport { jsx as _jsx } from \"react/jsx-runtime\";\r\nconst MINIMUM_COLUMN_WIDTH = 50;\r\nvar ScrollDirection = /*#__PURE__*/function (ScrollDirection) {\r\n  ScrollDirection[ScrollDirection[\"NONE\"] = 0] = \"NONE\";\r\n  ScrollDirection[ScrollDirection[\"UP\"] = 1] = \"UP\";\r\n  ScrollDirection[ScrollDirection[\"DOWN\"] = 2] = \"DOWN\";\r\n  ScrollDirection[ScrollDirection[\"LEFT\"] = 3] = \"LEFT\";\r\n  ScrollDirection[ScrollDirection[\"RIGHT\"] = 4] = \"RIGHT\";\r\n  return ScrollDirection;\r\n}(ScrollDirection || {});\r\nconst EMPTY_SCROLL_POSITION = {\r\n  top: 0,\r\n  left: 0\r\n};\r\nexport const EMPTY_DETAIL_PANELS = Object.freeze(new Map());\r\nconst createScrollCache = (mode, rowBufferPx, columnBufferPx, verticalBuffer, horizontalBuffer) => ({\r\n  direction: ScrollDirection.NONE,\r\n  buffer: bufferForDirection(mode, ScrollDirection.NONE, rowBufferPx, columnBufferPx, verticalBuffer, horizontalBuffer)\r\n});\r\nconst isJSDOM = typeof window !== 'undefined' ? /jsdom/.test(window.navigator.userAgent) : false;\r\nexport const useGridVirtualScroller = () => {\r\n  const apiRef = useGridPrivateApiContext();\r\n  const rootProps = useGridRootProps();\r\n  const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\r\n  const enabled = useGridSelector(apiRef, gridVirtualizationEnabledSelector) && !isJSDOM;\r\n  const enabledForColumns = useGridSelector(apiRef, gridVirtualizationColumnEnabledSelector) && !isJSDOM;\r\n  const dimensions = useGridSelector(apiRef, gridDimensionsSelector);\r\n  const outerSize = dimensions.viewportOuterSize;\r\n  const pinnedRows = useGridSelector(apiRef, gridPinnedRowsSelector);\r\n  const pinnedColumns = useGridSelector(apiRef, gridVisiblePinnedColumnDefinitionsSelector);\r\n  const hasBottomPinnedRows = pinnedRows.bottom.length > 0;\r\n  const [panels, setPanels] = React.useState(EMPTY_DETAIL_PANELS);\r\n  const theme = useTheme();\r\n  const cellFocus = useGridSelector(apiRef, gridFocusCellSelector);\r\n  const cellTabIndex = useGridSelector(apiRef, gridTabIndexCellSelector);\r\n  const rowsMeta = useGridSelector(apiRef, gridRowsMetaSelector);\r\n  const selectedRowsLookup = useGridSelector(apiRef, selectedIdsLookupSelector);\r\n  const currentPage = useGridVisibleRows(apiRef, rootProps);\r\n  const gridRootRef = apiRef.current.rootElementRef;\r\n  const mainRef = apiRef.current.mainElementRef;\r\n  const scrollerRef = apiRef.current.virtualScrollerRef;\r\n  const scrollbarVerticalRef = React.useRef(null);\r\n  const scrollbarHorizontalRef = React.useRef(null);\r\n  const contentHeight = dimensions.contentSize.height;\r\n  const columnsTotalWidth = dimensions.columnsTotalWidth;\r\n  const hasColSpan = useGridSelector(apiRef, gridHasColSpanSelector);\r\n  useResizeObserver(mainRef, () => apiRef.current.resize());\r\n\r\n  /*\r\n   * Scroll context logic\r\n   * ====================\r\n   * We only render the cells contained in the `renderContext`. However, when the user starts scrolling the grid\r\n   * in a direction, we want to render as many cells as possible in that direction, as to avoid presenting white\r\n   * areas if the user scrolls too fast/far and the viewport ends up in a region we haven't rendered yet. To render\r\n   * more cells, we store some offsets to add to the viewport in `scrollCache.buffer`. Those offsets make the render\r\n   * context wider in the direction the user is going, but also makes the buffer around the viewport `0` for the\r\n   * dimension (horizontal or vertical) in which the user is not scrolling. So if the normal viewport is 8 columns\r\n   * wide, with a 1 column buffer (10 columns total), then we want it to be exactly 8 columns wide during vertical\r\n   * scroll.\r\n   * However, we don't want the rows in the old context to re-render from e.g. 10 columns to 8 columns, because that's\r\n   * work that's not necessary. Thus we store the context at the start of the scroll in `frozenContext`, and the rows\r\n   * that are part of this old context will keep their same render context as to avoid re-rendering.\r\n   */\r\n  const scrollPosition = React.useRef(EMPTY_SCROLL_POSITION);\r\n  const previousContextScrollPosition = React.useRef(EMPTY_SCROLL_POSITION);\r\n  const previousRowContext = React.useRef(EMPTY_RENDER_CONTEXT);\r\n  const renderContext = useGridSelector(apiRef, gridRenderContextSelector);\r\n  const scrollTimeout = useTimeout();\r\n  const frozenContext = React.useRef(undefined);\r\n  const scrollCache = useLazyRef(() => createScrollCache(theme.direction, rootProps.rowBufferPx, rootProps.columnBufferPx, dimensions.rowHeight * 15, MINIMUM_COLUMN_WIDTH * 6)).current;\r\n  const focusedCell = {\r\n    rowIndex: React.useMemo(() => cellFocus ? currentPage.rows.findIndex(row => row.id === cellFocus.id) : -1, [cellFocus, currentPage.rows]),\r\n    columnIndex: React.useMemo(() => cellFocus ? visibleColumns.findIndex(column => column.field === cellFocus.field) : -1, [cellFocus, visibleColumns])\r\n  };\r\n  const updateRenderContext = React.useCallback(nextRenderContext => {\r\n    if (areRenderContextsEqual(nextRenderContext, apiRef.current.state.virtualization.renderContext)) {\r\n      return;\r\n    }\r\n    const didRowsIntervalChange = nextRenderContext.firstRowIndex !== previousRowContext.current.firstRowIndex || nextRenderContext.lastRowIndex !== previousRowContext.current.lastRowIndex;\r\n    apiRef.current.setState(state => {\r\n      return _extends({}, state, {\r\n        virtualization: _extends({}, state.virtualization, {\r\n          renderContext: nextRenderContext\r\n        })\r\n      });\r\n    });\r\n\r\n    // The lazy-loading hook is listening to `renderedRowsIntervalChange`,\r\n    // but only does something if the dimensions are also available.\r\n    // So we wait until we have valid dimensions before publishing the first event.\r\n    if (dimensions.isReady && didRowsIntervalChange) {\r\n      previousRowContext.current = nextRenderContext;\r\n      apiRef.current.publishEvent('renderedRowsIntervalChange', nextRenderContext);\r\n    }\r\n    previousContextScrollPosition.current = scrollPosition.current;\r\n  }, [apiRef, dimensions.isReady]);\r\n  const triggerUpdateRenderContext = () => {\r\n    const newScroll = {\r\n      top: scrollerRef.current.scrollTop,\r\n      left: scrollerRef.current.scrollLeft\r\n    };\r\n    const dx = newScroll.left - scrollPosition.current.left;\r\n    const dy = newScroll.top - scrollPosition.current.top;\r\n    const isScrolling = dx !== 0 || dy !== 0;\r\n    scrollPosition.current = newScroll;\r\n    const direction = isScrolling ? directionForDelta(dx, dy) : ScrollDirection.NONE;\r\n\r\n    // Since previous render, we have scrolled...\r\n    const rowScroll = Math.abs(scrollPosition.current.top - previousContextScrollPosition.current.top);\r\n    const columnScroll = Math.abs(scrollPosition.current.left - previousContextScrollPosition.current.left);\r\n\r\n    // PERF: use the computed minimum column width instead of a static one\r\n    const didCrossThreshold = rowScroll >= dimensions.rowHeight || columnScroll >= MINIMUM_COLUMN_WIDTH;\r\n    const didChangeDirection = scrollCache.direction !== direction;\r\n    const shouldUpdate = didCrossThreshold || didChangeDirection;\r\n    if (!shouldUpdate) {\r\n      return renderContext;\r\n    }\r\n\r\n    // Render a new context\r\n\r\n    if (didChangeDirection) {\r\n      switch (direction) {\r\n        case ScrollDirection.NONE:\r\n        case ScrollDirection.LEFT:\r\n        case ScrollDirection.RIGHT:\r\n          frozenContext.current = undefined;\r\n          break;\r\n        default:\r\n          frozenContext.current = renderContext;\r\n          break;\r\n      }\r\n    }\r\n    scrollCache.direction = direction;\r\n    scrollCache.buffer = bufferForDirection(theme.direction, direction, rootProps.rowBufferPx, rootProps.columnBufferPx, dimensions.rowHeight * 15, MINIMUM_COLUMN_WIDTH * 6);\r\n    const inputs = inputsSelector(apiRef, rootProps, enabled, enabledForColumns);\r\n    const nextRenderContext = computeRenderContext(inputs, scrollPosition.current, scrollCache);\r\n\r\n    // Prevents batching render context changes\r\n    ReactDOM.flushSync(() => {\r\n      updateRenderContext(nextRenderContext);\r\n    });\r\n    scrollTimeout.start(1000, triggerUpdateRenderContext);\r\n    return nextRenderContext;\r\n  };\r\n  const forceUpdateRenderContext = () => {\r\n    const inputs = inputsSelector(apiRef, rootProps, enabled, enabledForColumns);\r\n    const nextRenderContext = computeRenderContext(inputs, scrollPosition.current, scrollCache);\r\n    updateRenderContext(nextRenderContext);\r\n  };\r\n  const handleScroll = useEventCallback(event => {\r\n    const {\r\n      scrollTop,\r\n      scrollLeft\r\n    } = event.currentTarget;\r\n\r\n    // On iOS and macOS, negative offsets are possible when swiping past the start\r\n    if (scrollTop < 0) {\r\n      return;\r\n    }\r\n    if (theme.direction === 'ltr') {\r\n      if (scrollLeft < 0) {\r\n        return;\r\n      }\r\n    }\r\n    if (theme.direction === 'rtl') {\r\n      if (scrollLeft > 0) {\r\n        return;\r\n      }\r\n    }\r\n    const nextRenderContext = triggerUpdateRenderContext();\r\n    apiRef.current.publishEvent('scrollPositionChange', {\r\n      top: scrollTop,\r\n      left: scrollLeft,\r\n      renderContext: nextRenderContext\r\n    });\r\n  });\r\n  const handleWheel = useEventCallback(event => {\r\n    apiRef.current.publishEvent('virtualScrollerWheel', {}, event);\r\n  });\r\n  const handleTouchMove = useEventCallback(event => {\r\n    apiRef.current.publishEvent('virtualScrollerTouchMove', {}, event);\r\n  });\r\n  const getRows = (params = {}) => {\r\n    if (!params.rows && !currentPage.range) {\r\n      return [];\r\n    }\r\n    const baseRenderContext = params.renderContext ?? renderContext;\r\n    const isLastSection = !hasBottomPinnedRows && params.position === undefined || hasBottomPinnedRows && params.position === 'bottom';\r\n    const isPinnedSection = params.position !== undefined;\r\n    let rowIndexOffset;\r\n    // FIXME: Why is the switch check exhaustiveness not validated with typescript-eslint?\r\n    // eslint-disable-next-line default-case\r\n    switch (params.position) {\r\n      case 'top':\r\n        rowIndexOffset = 0;\r\n        break;\r\n      case 'bottom':\r\n        rowIndexOffset = pinnedRows.top.length + currentPage.rows.length;\r\n        break;\r\n      case undefined:\r\n        rowIndexOffset = pinnedRows.top.length;\r\n        break;\r\n    }\r\n    const rowModels = params.rows ?? currentPage.rows;\r\n    const firstRowToRender = baseRenderContext.firstRowIndex;\r\n    const lastRowToRender = Math.min(baseRenderContext.lastRowIndex, rowModels.length);\r\n    const rowIndexes = params.rows ? range(0, params.rows.length) : range(firstRowToRender, lastRowToRender);\r\n    let virtualRowIndex = -1;\r\n    if (!isPinnedSection && focusedCell.rowIndex !== -1) {\r\n      if (focusedCell.rowIndex < firstRowToRender) {\r\n        virtualRowIndex = focusedCell.rowIndex;\r\n        rowIndexes.unshift(virtualRowIndex);\r\n      }\r\n      if (focusedCell.rowIndex >= lastRowToRender) {\r\n        virtualRowIndex = focusedCell.rowIndex;\r\n        rowIndexes.push(virtualRowIndex);\r\n      }\r\n    }\r\n    const rows = [];\r\n    const rowProps = rootProps.slotProps?.row;\r\n    const columnPositions = gridColumnPositionsSelector(apiRef);\r\n    rowIndexes.forEach(rowIndexInPage => {\r\n      const {\r\n        id,\r\n        model\r\n      } = rowModels[rowIndexInPage];\r\n\r\n      // NOTE: This is an expensive feature, the colSpan code could be optimized.\r\n      if (hasColSpan) {\r\n        const minFirstColumn = pinnedColumns.left.length;\r\n        const maxLastColumn = visibleColumns.length - pinnedColumns.right.length;\r\n        apiRef.current.calculateColSpan({\r\n          rowId: id,\r\n          minFirstColumn,\r\n          maxLastColumn,\r\n          columns: visibleColumns\r\n        });\r\n        if (pinnedColumns.left.length > 0) {\r\n          apiRef.current.calculateColSpan({\r\n            rowId: id,\r\n            minFirstColumn: 0,\r\n            maxLastColumn: pinnedColumns.left.length,\r\n            columns: visibleColumns\r\n          });\r\n        }\r\n        if (pinnedColumns.right.length > 0) {\r\n          apiRef.current.calculateColSpan({\r\n            rowId: id,\r\n            minFirstColumn: visibleColumns.length - pinnedColumns.right.length,\r\n            maxLastColumn: visibleColumns.length,\r\n            columns: visibleColumns\r\n          });\r\n        }\r\n      }\r\n      const hasFocus = cellFocus?.id === id;\r\n      const baseRowHeight = !apiRef.current.rowHasAutoHeight(id) ? apiRef.current.unstable_getRowHeight(id) : 'auto';\r\n      let isSelected;\r\n      if (selectedRowsLookup[id] == null) {\r\n        isSelected = false;\r\n      } else {\r\n        isSelected = apiRef.current.isRowSelectable(id);\r\n      }\r\n      let isFirstVisible = false;\r\n      if (params.position === undefined) {\r\n        isFirstVisible = rowIndexInPage === 0;\r\n      }\r\n      let isLastVisible = false;\r\n      if (isLastSection) {\r\n        if (!isPinnedSection) {\r\n          const lastIndex = currentPage.rows.length - 1;\r\n          const isLastVisibleRowIndex = rowIndexInPage === lastIndex;\r\n          if (isLastVisibleRowIndex) {\r\n            isLastVisible = true;\r\n          }\r\n        } else {\r\n          isLastVisible = rowIndexInPage === rowModels.length - 1;\r\n        }\r\n      }\r\n      const isVirtualRow = rowIndexInPage === virtualRowIndex;\r\n      const isNotVisible = isVirtualRow;\r\n      let tabbableCell = null;\r\n      if (cellTabIndex !== null && cellTabIndex.id === id) {\r\n        const cellParams = apiRef.current.getCellParams(id, cellTabIndex.field);\r\n        tabbableCell = cellParams.cellMode === 'view' ? cellTabIndex.field : null;\r\n      }\r\n      let currentRenderContext = baseRenderContext;\r\n      if (!isPinnedSection && frozenContext.current && rowIndexInPage >= frozenContext.current.firstRowIndex && rowIndexInPage < frozenContext.current.lastRowIndex) {\r\n        currentRenderContext = frozenContext.current;\r\n      }\r\n      const offsetLeft = computeOffsetLeft(columnPositions, currentRenderContext, theme.direction, pinnedColumns.left.length);\r\n      const rowIndex = (currentPage?.range?.firstRowIndex || 0) + rowIndexOffset + rowIndexInPage;\r\n      rows.push( /*#__PURE__*/_jsx(rootProps.slots.row, _extends({\r\n        row: model,\r\n        rowId: id,\r\n        index: rowIndex,\r\n        selected: isSelected,\r\n        offsetTop: params.rows ? undefined : rowsMeta.positions[rowIndexInPage],\r\n        offsetLeft: offsetLeft,\r\n        dimensions: dimensions,\r\n        rowHeight: baseRowHeight,\r\n        tabbableCell: tabbableCell,\r\n        pinnedColumns: pinnedColumns,\r\n        visibleColumns: visibleColumns,\r\n        renderContext: currentRenderContext,\r\n        focusedColumnIndex: hasFocus ? focusedCell.columnIndex : undefined,\r\n        isFirstVisible: isFirstVisible,\r\n        isLastVisible: isLastVisible,\r\n        isNotVisible: isNotVisible\r\n      }, rowProps), id));\r\n      const panel = panels.get(id);\r\n      if (panel) {\r\n        rows.push(panel);\r\n      }\r\n      if (isLastVisible) {\r\n        rows.push(apiRef.current.getInfiniteLoadingTriggerElement?.({\r\n          lastRowId: id\r\n        }));\r\n      }\r\n    });\r\n    return rows;\r\n  };\r\n  const needsHorizontalScrollbar = outerSize.width && columnsTotalWidth >= outerSize.width;\r\n  const scrollerStyle = React.useMemo(() => ({\r\n    overflowX: !needsHorizontalScrollbar ? 'hidden' : undefined,\r\n    overflowY: rootProps.autoHeight ? 'hidden' : undefined\r\n  }), [needsHorizontalScrollbar, rootProps.autoHeight]);\r\n  const contentSize = React.useMemo(() => {\r\n    // In cases where the columns exceed the available width,\r\n    // the horizontal scrollbar should be shown even when there're no rows.\r\n    // Keeping 1px as minimum height ensures that the scrollbar will visible if necessary.\r\n    const height = Math.max(contentHeight, 1);\r\n    const size = {\r\n      width: needsHorizontalScrollbar ? columnsTotalWidth : 'auto',\r\n      height\r\n    };\r\n    if (rootProps.autoHeight) {\r\n      if (currentPage.rows.length === 0) {\r\n        size.height = getMinimalContentHeight(apiRef); // Give room to show the overlay when there no rows.\r\n      } else {\r\n        size.height = contentHeight;\r\n      }\r\n    }\r\n    return size;\r\n  }, [apiRef, columnsTotalWidth, contentHeight, needsHorizontalScrollbar, rootProps.autoHeight, currentPage.rows.length]);\r\n  React.useEffect(() => {\r\n    apiRef.current.publishEvent('virtualScrollerContentSizeChange');\r\n  }, [apiRef, contentSize]);\r\n  useEnhancedEffect(() => {\r\n    // FIXME: Is this really necessary?\r\n    apiRef.current.resize();\r\n  }, [apiRef, rowsMeta.currentPageTotalHeight]);\r\n  useEnhancedEffect(() => {\r\n    if (enabled) {\r\n      // TODO a scroll reset should not be necessary\r\n      scrollerRef.current.scrollLeft = 0;\r\n      scrollerRef.current.scrollTop = 0;\r\n    }\r\n  }, [enabled, gridRootRef, scrollerRef]);\r\n  useRunOnce(outerSize.width !== 0, () => {\r\n    const inputs = inputsSelector(apiRef, rootProps, enabled, enabledForColumns);\r\n    const initialRenderContext = computeRenderContext(inputs, scrollPosition.current, scrollCache);\r\n    updateRenderContext(initialRenderContext);\r\n    apiRef.current.publishEvent('scrollPositionChange', {\r\n      top: scrollPosition.current.top,\r\n      left: scrollPosition.current.left,\r\n      renderContext: initialRenderContext\r\n    });\r\n  });\r\n  apiRef.current.register('private', {\r\n    updateRenderContext: forceUpdateRenderContext\r\n  });\r\n  useGridApiEventHandler(apiRef, 'columnsChange', forceUpdateRenderContext);\r\n  useGridApiEventHandler(apiRef, 'filteredRowsSet', forceUpdateRenderContext);\r\n  useGridApiEventHandler(apiRef, 'rowExpansionChange', forceUpdateRenderContext);\r\n  return {\r\n    renderContext,\r\n    setPanels,\r\n    getRows,\r\n    getContainerProps: () => ({\r\n      ref: mainRef\r\n    }),\r\n    getScrollerProps: () => ({\r\n      ref: scrollerRef,\r\n      tabIndex: -1,\r\n      onScroll: handleScroll,\r\n      onWheel: handleWheel,\r\n      onTouchMove: handleTouchMove,\r\n      style: scrollerStyle,\r\n      role: 'presentation'\r\n    }),\r\n    getContentProps: () => ({\r\n      style: contentSize,\r\n      role: 'presentation'\r\n    }),\r\n    getRenderZoneProps: () => ({\r\n      role: 'rowgroup'\r\n    }),\r\n    getScrollbarVerticalProps: () => ({\r\n      ref: scrollbarVerticalRef,\r\n      role: 'presentation'\r\n    }),\r\n    getScrollbarHorizontalProps: () => ({\r\n      ref: scrollbarHorizontalRef,\r\n      role: 'presentation'\r\n    })\r\n  };\r\n};\r\nfunction inputsSelector(apiRef, rootProps, enabled, enabledForColumns) {\r\n  const dimensions = gridDimensionsSelector(apiRef.current.state);\r\n  const currentPage = getVisibleRows(apiRef, rootProps);\r\n  const visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef);\r\n  const lastRowId = apiRef.current.state.rows.dataRowIds.at(-1);\r\n  const lastColumn = visibleColumns.at(-1);\r\n  return {\r\n    enabled,\r\n    enabledForColumns,\r\n    apiRef,\r\n    autoHeight: rootProps.autoHeight,\r\n    rowBufferPx: rootProps.rowBufferPx,\r\n    columnBufferPx: rootProps.columnBufferPx,\r\n    leftPinnedWidth: dimensions.leftPinnedWidth,\r\n    columnsTotalWidth: dimensions.columnsTotalWidth,\r\n    viewportInnerWidth: dimensions.viewportInnerSize.width,\r\n    viewportInnerHeight: dimensions.viewportInnerSize.height,\r\n    lastRowHeight: lastRowId !== undefined ? apiRef.current.unstable_getRowHeight(lastRowId) : 0,\r\n    lastColumnWidth: lastColumn?.computedWidth ?? 0,\r\n    rowsMeta: gridRowsMetaSelector(apiRef.current.state),\r\n    columnPositions: gridColumnPositionsSelector(apiRef),\r\n    rows: currentPage.rows,\r\n    range: currentPage.range,\r\n    pinnedColumns: gridVisiblePinnedColumnDefinitionsSelector(apiRef),\r\n    visibleColumns\r\n  };\r\n}\r\nfunction computeRenderContext(inputs, scrollPosition, scrollCache) {\r\n  let renderContext;\r\n  if (!inputs.enabled) {\r\n    renderContext = {\r\n      firstRowIndex: 0,\r\n      lastRowIndex: inputs.rows.length,\r\n      firstColumnIndex: 0,\r\n      lastColumnIndex: inputs.visibleColumns.length\r\n    };\r\n  } else {\r\n    const {\r\n      top,\r\n      left\r\n    } = scrollPosition;\r\n    const realLeft = Math.abs(left) + inputs.leftPinnedWidth;\r\n\r\n    // Clamp the value because the search may return an index out of bounds.\r\n    // In the last index, this is not needed because Array.slice doesn't include it.\r\n    const firstRowIndex = Math.min(getNearestIndexToRender(inputs, top, {\r\n      atStart: true,\r\n      lastPosition: inputs.rowsMeta.positions[inputs.rowsMeta.positions.length - 1] + inputs.lastRowHeight\r\n    }), inputs.rowsMeta.positions.length - 1);\r\n    const lastRowIndex = inputs.autoHeight ? firstRowIndex + inputs.rows.length : getNearestIndexToRender(inputs, top + inputs.viewportInnerHeight);\r\n    let firstColumnIndex = 0;\r\n    let lastColumnIndex = inputs.columnPositions.length;\r\n    if (inputs.enabledForColumns) {\r\n      let hasRowWithAutoHeight = false;\r\n      const [firstRowToRender, lastRowToRender] = getIndexesToRender({\r\n        firstIndex: firstRowIndex,\r\n        lastIndex: lastRowIndex,\r\n        minFirstIndex: 0,\r\n        maxLastIndex: inputs.rows.length,\r\n        bufferBefore: scrollCache.buffer.rowBefore,\r\n        bufferAfter: scrollCache.buffer.rowAfter,\r\n        positions: inputs.rowsMeta.positions,\r\n        lastSize: inputs.lastRowHeight\r\n      });\r\n      for (let i = firstRowToRender; i < lastRowToRender && !hasRowWithAutoHeight; i += 1) {\r\n        const row = inputs.rows[i];\r\n        hasRowWithAutoHeight = inputs.apiRef.current.rowHasAutoHeight(row.id);\r\n      }\r\n      if (!hasRowWithAutoHeight) {\r\n        firstColumnIndex = binarySearch(realLeft, inputs.columnPositions, {\r\n          atStart: true,\r\n          lastPosition: inputs.columnsTotalWidth\r\n        });\r\n        lastColumnIndex = binarySearch(realLeft + inputs.viewportInnerWidth, inputs.columnPositions);\r\n      }\r\n    }\r\n    renderContext = {\r\n      firstRowIndex,\r\n      lastRowIndex,\r\n      firstColumnIndex,\r\n      lastColumnIndex\r\n    };\r\n  }\r\n  const actualRenderContext = deriveRenderContext(inputs, renderContext, scrollCache);\r\n  return actualRenderContext;\r\n}\r\nfunction getNearestIndexToRender(inputs, offset, options) {\r\n  const lastMeasuredIndexRelativeToAllRows = inputs.apiRef.current.getLastMeasuredRowIndex();\r\n  let allRowsMeasured = lastMeasuredIndexRelativeToAllRows === Infinity;\r\n  if (inputs.range?.lastRowIndex && !allRowsMeasured) {\r\n    // Check if all rows in this page are already measured\r\n    allRowsMeasured = lastMeasuredIndexRelativeToAllRows >= inputs.range.lastRowIndex;\r\n  }\r\n  const lastMeasuredIndexRelativeToCurrentPage = clamp(lastMeasuredIndexRelativeToAllRows - (inputs.range?.firstRowIndex || 0), 0, inputs.rowsMeta.positions.length);\r\n  if (allRowsMeasured || inputs.rowsMeta.positions[lastMeasuredIndexRelativeToCurrentPage] >= offset) {\r\n    // If all rows were measured (when no row has \"auto\" as height) or all rows before the offset\r\n    // were measured, then use a binary search because it's faster.\r\n    return binarySearch(offset, inputs.rowsMeta.positions, options);\r\n  }\r\n\r\n  // Otherwise, use an exponential search.\r\n  // If rows have \"auto\" as height, their positions will be based on estimated heights.\r\n  // In this case, we can skip several steps until we find a position higher than the offset.\r\n  // Inspired by https://github.com/bvaughn/react-virtualized/blob/master/source/Grid/utils/CellSizeAndPositionManager.js\r\n  return exponentialSearch(offset, inputs.rowsMeta.positions, lastMeasuredIndexRelativeToCurrentPage, options);\r\n}\r\n\r\n/**\r\n * Accepts as input a raw render context (the area visible in the viewport) and adds\r\n * computes the actual render context based on pinned elements, buffer dimensions and\r\n * spanning.\r\n */\r\nfunction deriveRenderContext(inputs, nextRenderContext, scrollCache) {\r\n  const [firstRowToRender, lastRowToRender] = getIndexesToRender({\r\n    firstIndex: nextRenderContext.firstRowIndex,\r\n    lastIndex: nextRenderContext.lastRowIndex,\r\n    minFirstIndex: 0,\r\n    maxLastIndex: inputs.rows.length,\r\n    bufferBefore: scrollCache.buffer.rowBefore,\r\n    bufferAfter: scrollCache.buffer.rowAfter,\r\n    positions: inputs.rowsMeta.positions,\r\n    lastSize: inputs.lastRowHeight\r\n  });\r\n  const [initialFirstColumnToRender, lastColumnToRender] = getIndexesToRender({\r\n    firstIndex: nextRenderContext.firstColumnIndex,\r\n    lastIndex: nextRenderContext.lastColumnIndex,\r\n    minFirstIndex: inputs.pinnedColumns.left.length,\r\n    maxLastIndex: inputs.visibleColumns.length - inputs.pinnedColumns.right.length,\r\n    bufferBefore: scrollCache.buffer.columnBefore,\r\n    bufferAfter: scrollCache.buffer.columnAfter,\r\n    positions: inputs.columnPositions,\r\n    lastSize: inputs.lastColumnWidth\r\n  });\r\n  const firstColumnToRender = getFirstNonSpannedColumnToRender({\r\n    firstColumnToRender: initialFirstColumnToRender,\r\n    apiRef: inputs.apiRef,\r\n    firstRowToRender,\r\n    lastRowToRender,\r\n    visibleRows: inputs.rows\r\n  });\r\n  return {\r\n    firstRowIndex: firstRowToRender,\r\n    lastRowIndex: lastRowToRender,\r\n    firstColumnIndex: firstColumnToRender,\r\n    lastColumnIndex: lastColumnToRender\r\n  };\r\n}\r\n/**\r\n * Use binary search to avoid looping through all possible positions.\r\n * The `options.atStart` provides the possibility to match for the first element that\r\n * intersects the screen, even if said element's start position is before `offset`. In\r\n * other words, we search for `offset + width`.\r\n */\r\nfunction binarySearch(offset, positions, options = undefined, sliceStart = 0, sliceEnd = positions.length) {\r\n  if (positions.length <= 0) {\r\n    return -1;\r\n  }\r\n  if (sliceStart >= sliceEnd) {\r\n    return sliceStart;\r\n  }\r\n  const pivot = sliceStart + Math.floor((sliceEnd - sliceStart) / 2);\r\n  const position = positions[pivot];\r\n  let isBefore;\r\n  if (options?.atStart) {\r\n    const width = (pivot === positions.length - 1 ? options.lastPosition : positions[pivot + 1]) - position;\r\n    isBefore = offset - width < position;\r\n  } else {\r\n    isBefore = offset <= position;\r\n  }\r\n  return isBefore ? binarySearch(offset, positions, options, sliceStart, pivot) : binarySearch(offset, positions, options, pivot + 1, sliceEnd);\r\n}\r\nfunction exponentialSearch(offset, positions, index, options = undefined) {\r\n  let interval = 1;\r\n  while (index < positions.length && Math.abs(positions[index]) < offset) {\r\n    index += interval;\r\n    interval *= 2;\r\n  }\r\n  return binarySearch(offset, positions, options, Math.floor(index / 2), Math.min(index, positions.length));\r\n}\r\nfunction getIndexesToRender({\r\n  firstIndex,\r\n  lastIndex,\r\n  bufferBefore,\r\n  bufferAfter,\r\n  minFirstIndex,\r\n  maxLastIndex,\r\n  positions,\r\n  lastSize\r\n}) {\r\n  const firstPosition = positions[firstIndex] - bufferBefore;\r\n  const lastPosition = positions[lastIndex] + bufferAfter;\r\n  const firstIndexPadded = binarySearch(firstPosition, positions, {\r\n    atStart: true,\r\n    lastPosition: positions[positions.length - 1] + lastSize\r\n  });\r\n  const lastIndexPadded = binarySearch(lastPosition, positions);\r\n  return [clamp(firstIndexPadded, minFirstIndex, maxLastIndex), clamp(lastIndexPadded, minFirstIndex, maxLastIndex)];\r\n}\r\nexport function areRenderContextsEqual(context1, context2) {\r\n  if (context1 === context2) {\r\n    return true;\r\n  }\r\n  return context1.firstRowIndex === context2.firstRowIndex && context1.lastRowIndex === context2.lastRowIndex && context1.firstColumnIndex === context2.firstColumnIndex && context1.lastColumnIndex === context2.lastColumnIndex;\r\n}\r\nexport function computeOffsetLeft(columnPositions, renderContext, direction, pinnedLeftLength) {\r\n  const factor = direction === 'ltr' ? 1 : -1;\r\n  const left = factor * (columnPositions[renderContext.firstColumnIndex] ?? 0) - (columnPositions[pinnedLeftLength] ?? 0);\r\n  return Math.abs(left);\r\n}\r\nfunction directionForDelta(dx, dy) {\r\n  if (dx === 0 && dy === 0) {\r\n    return ScrollDirection.NONE;\r\n  }\r\n  /* eslint-disable */\r\n  if (Math.abs(dy) >= Math.abs(dx)) {\r\n    if (dy > 0) {\r\n      return ScrollDirection.DOWN;\r\n    } else {\r\n      return ScrollDirection.UP;\r\n    }\r\n  } else {\r\n    if (dx > 0) {\r\n      return ScrollDirection.RIGHT;\r\n    } else {\r\n      return ScrollDirection.LEFT;\r\n    }\r\n  }\r\n  /* eslint-enable */\r\n}\r\nfunction bufferForDirection(mode, direction, rowBufferPx, columnBufferPx, verticalBuffer, horizontalBuffer) {\r\n  if (mode === 'rtl') {\r\n    switch (direction) {\r\n      case ScrollDirection.LEFT:\r\n        direction = ScrollDirection.RIGHT;\r\n        break;\r\n      case ScrollDirection.RIGHT:\r\n        direction = ScrollDirection.LEFT;\r\n        break;\r\n      default:\r\n    }\r\n  }\r\n  switch (direction) {\r\n    case ScrollDirection.NONE:\r\n      return {\r\n        rowAfter: rowBufferPx,\r\n        rowBefore: rowBufferPx,\r\n        columnAfter: columnBufferPx,\r\n        columnBefore: columnBufferPx\r\n      };\r\n    case ScrollDirection.LEFT:\r\n      return {\r\n        rowAfter: 0,\r\n        rowBefore: 0,\r\n        columnAfter: 0,\r\n        columnBefore: horizontalBuffer\r\n      };\r\n    case ScrollDirection.RIGHT:\r\n      return {\r\n        rowAfter: 0,\r\n        rowBefore: 0,\r\n        columnAfter: horizontalBuffer,\r\n        columnBefore: 0\r\n      };\r\n    case ScrollDirection.UP:\r\n      return {\r\n        rowAfter: 0,\r\n        rowBefore: verticalBuffer,\r\n        columnAfter: 0,\r\n        columnBefore: 0\r\n      };\r\n    case ScrollDirection.DOWN:\r\n      return {\r\n        rowAfter: verticalBuffer,\r\n        rowBefore: 0,\r\n        columnAfter: 0,\r\n        columnBefore: 0\r\n      };\r\n    default:\r\n      // eslint unable to figure out enum exhaustiveness\r\n      throw new Error('unreachable');\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}