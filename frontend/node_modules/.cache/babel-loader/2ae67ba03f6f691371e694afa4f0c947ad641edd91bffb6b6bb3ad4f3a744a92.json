{"ast":null,"code":"// @ignore - do not document.\nimport * as React from 'react';\nimport { DrawingContext } from '../context/DrawingProvider';\nimport { getPercentageValue } from '../internals/utils';\nimport { getArcRatios, getAvailableRadius } from './utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const GaugeContext = /*#__PURE__*/React.createContext({\n  value: null,\n  valueMin: 0,\n  valueMax: 0,\n  startAngle: 0,\n  endAngle: 0,\n  innerRadius: 0,\n  outerRadius: 0,\n  cornerRadius: 0,\n  cx: 0,\n  cy: 0,\n  maxRadius: 0,\n  valueAngle: null\n});\nif (process.env.NODE_ENV !== 'production') {\n  GaugeContext.displayName = 'GaugeContext';\n}\nexport function GaugeProvider(props) {\n  const {\n    value = null,\n    valueMin = 0,\n    valueMax = 100,\n    startAngle = 0,\n    endAngle = 360,\n    outerRadius: outerRadiusParam,\n    innerRadius: innerRadiusParam,\n    cornerRadius: cornerRadiusParam,\n    cx: cxParam,\n    cy: cyParam,\n    children\n  } = props;\n  const {\n    width,\n    height,\n    top,\n    left\n  } = React.useContext(DrawingContext);\n  const ratios = getArcRatios(startAngle, endAngle);\n  const innerCx = cxParam ? getPercentageValue(cxParam, width) : ratios.cx * width;\n  const innerCy = cyParam ? getPercentageValue(cyParam, height) : ratios.cy * height;\n  let cx = left + innerCx;\n  let cy = top + innerCy;\n  const maxRadius = getAvailableRadius(innerCx, innerCy, width, height, ratios);\n\n  // If the center is not defined, after computation of the available radius, udpate the center to use the remaining space.\n  if (cxParam === undefined) {\n    const usedWidth = maxRadius * (ratios.maxX - ratios.minX);\n    cx = left + (width - usedWidth) / 2 + ratios.cx * usedWidth;\n  }\n  if (cyParam === undefined) {\n    const usedHeight = maxRadius * (ratios.maxY - ratios.minY);\n    cy = top + (height - usedHeight) / 2 + ratios.cy * usedHeight;\n  }\n  const outerRadius = getPercentageValue(outerRadiusParam ?? maxRadius, maxRadius);\n  const innerRadius = getPercentageValue(innerRadiusParam ?? '80%', maxRadius);\n  const cornerRadius = getPercentageValue(cornerRadiusParam ?? 0, outerRadius - innerRadius);\n  const contextValue = React.useMemo(() => {\n    const startAngleRad = Math.PI * startAngle / 180;\n    const endAngleRad = Math.PI * endAngle / 180;\n    return {\n      value,\n      valueMin,\n      valueMax,\n      startAngle: startAngleRad,\n      endAngle: endAngleRad,\n      outerRadius,\n      innerRadius,\n      cornerRadius,\n      cx,\n      cy,\n      maxRadius,\n      valueAngle: value === null ? null : startAngleRad + (endAngleRad - startAngleRad) * (value - valueMin) / (valueMax - valueMin)\n    };\n  }, [value, valueMin, valueMax, startAngle, endAngle, outerRadius, innerRadius, cornerRadius, cx, cy, maxRadius]);\n  return /*#__PURE__*/_jsx(GaugeContext.Provider, {\n    value: contextValue,\n    children: children\n  });\n}\nexport function useGaugeState() {\n  return React.useContext(GaugeContext);\n}","map":{"version":3,"names":["React","DrawingContext","getPercentageValue","getArcRatios","getAvailableRadius","jsx","_jsx","GaugeContext","createContext","value","valueMin","valueMax","startAngle","endAngle","innerRadius","outerRadius","cornerRadius","cx","cy","maxRadius","valueAngle","process","env","NODE_ENV","displayName","GaugeProvider","props","outerRadiusParam","innerRadiusParam","cornerRadiusParam","cxParam","cyParam","children","width","height","top","left","useContext","ratios","innerCx","innerCy","undefined","usedWidth","maxX","minX","usedHeight","maxY","minY","contextValue","useMemo","startAngleRad","Math","PI","endAngleRad","Provider","useGaugeState"],"sources":["C:/WebSovellukset/Loppuprojekti/frontend/node_modules/@mui/x-charts/esm/Gauge/GaugeProvider.js"],"sourcesContent":["// @ignore - do not document.\nimport * as React from 'react';\nimport { DrawingContext } from '../context/DrawingProvider';\nimport { getPercentageValue } from '../internals/utils';\nimport { getArcRatios, getAvailableRadius } from './utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const GaugeContext = /*#__PURE__*/React.createContext({\n  value: null,\n  valueMin: 0,\n  valueMax: 0,\n  startAngle: 0,\n  endAngle: 0,\n  innerRadius: 0,\n  outerRadius: 0,\n  cornerRadius: 0,\n  cx: 0,\n  cy: 0,\n  maxRadius: 0,\n  valueAngle: null\n});\nif (process.env.NODE_ENV !== 'production') {\n  GaugeContext.displayName = 'GaugeContext';\n}\nexport function GaugeProvider(props) {\n  const {\n    value = null,\n    valueMin = 0,\n    valueMax = 100,\n    startAngle = 0,\n    endAngle = 360,\n    outerRadius: outerRadiusParam,\n    innerRadius: innerRadiusParam,\n    cornerRadius: cornerRadiusParam,\n    cx: cxParam,\n    cy: cyParam,\n    children\n  } = props;\n  const {\n    width,\n    height,\n    top,\n    left\n  } = React.useContext(DrawingContext);\n  const ratios = getArcRatios(startAngle, endAngle);\n  const innerCx = cxParam ? getPercentageValue(cxParam, width) : ratios.cx * width;\n  const innerCy = cyParam ? getPercentageValue(cyParam, height) : ratios.cy * height;\n  let cx = left + innerCx;\n  let cy = top + innerCy;\n  const maxRadius = getAvailableRadius(innerCx, innerCy, width, height, ratios);\n\n  // If the center is not defined, after computation of the available radius, udpate the center to use the remaining space.\n  if (cxParam === undefined) {\n    const usedWidth = maxRadius * (ratios.maxX - ratios.minX);\n    cx = left + (width - usedWidth) / 2 + ratios.cx * usedWidth;\n  }\n  if (cyParam === undefined) {\n    const usedHeight = maxRadius * (ratios.maxY - ratios.minY);\n    cy = top + (height - usedHeight) / 2 + ratios.cy * usedHeight;\n  }\n  const outerRadius = getPercentageValue(outerRadiusParam ?? maxRadius, maxRadius);\n  const innerRadius = getPercentageValue(innerRadiusParam ?? '80%', maxRadius);\n  const cornerRadius = getPercentageValue(cornerRadiusParam ?? 0, outerRadius - innerRadius);\n  const contextValue = React.useMemo(() => {\n    const startAngleRad = Math.PI * startAngle / 180;\n    const endAngleRad = Math.PI * endAngle / 180;\n    return {\n      value,\n      valueMin,\n      valueMax,\n      startAngle: startAngleRad,\n      endAngle: endAngleRad,\n      outerRadius,\n      innerRadius,\n      cornerRadius,\n      cx,\n      cy,\n      maxRadius,\n      valueAngle: value === null ? null : startAngleRad + (endAngleRad - startAngleRad) * (value - valueMin) / (valueMax - valueMin)\n    };\n  }, [value, valueMin, valueMax, startAngle, endAngle, outerRadius, innerRadius, cornerRadius, cx, cy, maxRadius]);\n  return /*#__PURE__*/_jsx(GaugeContext.Provider, {\n    value: contextValue,\n    children: children\n  });\n}\nexport function useGaugeState() {\n  return React.useContext(GaugeContext);\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}